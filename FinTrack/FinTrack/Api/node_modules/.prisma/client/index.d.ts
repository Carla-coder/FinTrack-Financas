
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Transacao
 * 
 */
export type Transacao = $Result.DefaultSelection<Prisma.$TransacaoPayload>
/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Subcategoria
 * 
 */
export type Subcategoria = $Result.DefaultSelection<Prisma.$SubcategoriaPayload>
/**
 * Model Orcamento
 * 
 */
export type Orcamento = $Result.DefaultSelection<Prisma.$OrcamentoPayload>
/**
 * Model HistoricoOrcamento
 * 
 */
export type HistoricoOrcamento = $Result.DefaultSelection<Prisma.$HistoricoOrcamentoPayload>
/**
 * Model Relatorio
 * 
 */
export type Relatorio = $Result.DefaultSelection<Prisma.$RelatorioPayload>
/**
 * Model RelatorioJson
 * 
 */
export type RelatorioJson = $Result.DefaultSelection<Prisma.$RelatorioJsonPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CategoriaEnum: {
  RENDA: 'RENDA',
  ALIMENTACAO: 'ALIMENTACAO',
  TRANSPORTE: 'TRANSPORTE',
  UTILIDADES: 'UTILIDADES',
  ENTRETENIMENTO: 'ENTRETENIMENTO'
};

export type CategoriaEnum = (typeof CategoriaEnum)[keyof typeof CategoriaEnum]


export const TipoCategoriaEnum: {
  RENDA: 'RENDA',
  DESPESA: 'DESPESA'
};

export type TipoCategoriaEnum = (typeof TipoCategoriaEnum)[keyof typeof TipoCategoriaEnum]


export const StatusEnum: {
  DENTRO_DO_ORCAMENTO: 'DENTRO_DO_ORCAMENTO',
  ACIMA_DO_ORCAMENTO: 'ACIMA_DO_ORCAMENTO'
};

export type StatusEnum = (typeof StatusEnum)[keyof typeof StatusEnum]


export const TipoAjusteEnum: {
  PLANEJADO: 'PLANEJADO',
  REAL: 'REAL'
};

export type TipoAjusteEnum = (typeof TipoAjusteEnum)[keyof typeof TipoAjusteEnum]


export const TipoRelatorioEnum: {
  MENSAL: 'MENSAL',
  ANUAL: 'ANUAL',
  PERSONALIZADO: 'PERSONALIZADO'
};

export type TipoRelatorioEnum = (typeof TipoRelatorioEnum)[keyof typeof TipoRelatorioEnum]


export const TipoRelatorioJsonEnum: {
  INCOME_EXPENSE: 'INCOME_EXPENSE',
  CATEGORY_BREAKDOWN: 'CATEGORY_BREAKDOWN',
  BUDGET_COMPARISON: 'BUDGET_COMPARISON',
  SAVINGS: 'SAVINGS'
};

export type TipoRelatorioJsonEnum = (typeof TipoRelatorioJsonEnum)[keyof typeof TipoRelatorioJsonEnum]

}

export type CategoriaEnum = $Enums.CategoriaEnum

export const CategoriaEnum: typeof $Enums.CategoriaEnum

export type TipoCategoriaEnum = $Enums.TipoCategoriaEnum

export const TipoCategoriaEnum: typeof $Enums.TipoCategoriaEnum

export type StatusEnum = $Enums.StatusEnum

export const StatusEnum: typeof $Enums.StatusEnum

export type TipoAjusteEnum = $Enums.TipoAjusteEnum

export const TipoAjusteEnum: typeof $Enums.TipoAjusteEnum

export type TipoRelatorioEnum = $Enums.TipoRelatorioEnum

export const TipoRelatorioEnum: typeof $Enums.TipoRelatorioEnum

export type TipoRelatorioJsonEnum = $Enums.TipoRelatorioJsonEnum

export const TipoRelatorioJsonEnum: typeof $Enums.TipoRelatorioJsonEnum

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.transacao`: Exposes CRUD operations for the **Transacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transacaos
    * const transacaos = await prisma.transacao.findMany()
    * ```
    */
  get transacao(): Prisma.TransacaoDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs>;

  /**
   * `prisma.subcategoria`: Exposes CRUD operations for the **Subcategoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subcategorias
    * const subcategorias = await prisma.subcategoria.findMany()
    * ```
    */
  get subcategoria(): Prisma.SubcategoriaDelegate<ExtArgs>;

  /**
   * `prisma.orcamento`: Exposes CRUD operations for the **Orcamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orcamentos
    * const orcamentos = await prisma.orcamento.findMany()
    * ```
    */
  get orcamento(): Prisma.OrcamentoDelegate<ExtArgs>;

  /**
   * `prisma.historicoOrcamento`: Exposes CRUD operations for the **HistoricoOrcamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HistoricoOrcamentos
    * const historicoOrcamentos = await prisma.historicoOrcamento.findMany()
    * ```
    */
  get historicoOrcamento(): Prisma.HistoricoOrcamentoDelegate<ExtArgs>;

  /**
   * `prisma.relatorio`: Exposes CRUD operations for the **Relatorio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Relatorios
    * const relatorios = await prisma.relatorio.findMany()
    * ```
    */
  get relatorio(): Prisma.RelatorioDelegate<ExtArgs>;

  /**
   * `prisma.relatorioJson`: Exposes CRUD operations for the **RelatorioJson** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RelatorioJsons
    * const relatorioJsons = await prisma.relatorioJson.findMany()
    * ```
    */
  get relatorioJson(): Prisma.RelatorioJsonDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Transacao: 'Transacao',
    Categoria: 'Categoria',
    Subcategoria: 'Subcategoria',
    Orcamento: 'Orcamento',
    HistoricoOrcamento: 'HistoricoOrcamento',
    Relatorio: 'Relatorio',
    RelatorioJson: 'RelatorioJson'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "transacao" | "categoria" | "subcategoria" | "orcamento" | "historicoOrcamento" | "relatorio" | "relatorioJson"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Transacao: {
        payload: Prisma.$TransacaoPayload<ExtArgs>
        fields: Prisma.TransacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          findFirst: {
            args: Prisma.TransacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          findMany: {
            args: Prisma.TransacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>[]
          }
          create: {
            args: Prisma.TransacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          createMany: {
            args: Prisma.TransacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TransacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          update: {
            args: Prisma.TransacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          deleteMany: {
            args: Prisma.TransacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TransacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransacaoPayload>
          }
          aggregate: {
            args: Prisma.TransacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransacao>
          }
          groupBy: {
            args: Prisma.TransacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransacaoCountArgs<ExtArgs>
            result: $Utils.Optional<TransacaoCountAggregateOutputType> | number
          }
        }
      }
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Subcategoria: {
        payload: Prisma.$SubcategoriaPayload<ExtArgs>
        fields: Prisma.SubcategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubcategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubcategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload>
          }
          findFirst: {
            args: Prisma.SubcategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubcategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload>
          }
          findMany: {
            args: Prisma.SubcategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload>[]
          }
          create: {
            args: Prisma.SubcategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload>
          }
          createMany: {
            args: Prisma.SubcategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubcategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload>
          }
          update: {
            args: Prisma.SubcategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload>
          }
          deleteMany: {
            args: Prisma.SubcategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubcategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubcategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcategoriaPayload>
          }
          aggregate: {
            args: Prisma.SubcategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubcategoria>
          }
          groupBy: {
            args: Prisma.SubcategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubcategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubcategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<SubcategoriaCountAggregateOutputType> | number
          }
        }
      }
      Orcamento: {
        payload: Prisma.$OrcamentoPayload<ExtArgs>
        fields: Prisma.OrcamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrcamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrcamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload>
          }
          findFirst: {
            args: Prisma.OrcamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrcamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload>
          }
          findMany: {
            args: Prisma.OrcamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload>[]
          }
          create: {
            args: Prisma.OrcamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload>
          }
          createMany: {
            args: Prisma.OrcamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrcamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload>
          }
          update: {
            args: Prisma.OrcamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload>
          }
          deleteMany: {
            args: Prisma.OrcamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrcamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrcamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrcamentoPayload>
          }
          aggregate: {
            args: Prisma.OrcamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrcamento>
          }
          groupBy: {
            args: Prisma.OrcamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrcamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrcamentoCountArgs<ExtArgs>
            result: $Utils.Optional<OrcamentoCountAggregateOutputType> | number
          }
        }
      }
      HistoricoOrcamento: {
        payload: Prisma.$HistoricoOrcamentoPayload<ExtArgs>
        fields: Prisma.HistoricoOrcamentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoricoOrcamentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoricoOrcamentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload>
          }
          findFirst: {
            args: Prisma.HistoricoOrcamentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoricoOrcamentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload>
          }
          findMany: {
            args: Prisma.HistoricoOrcamentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload>[]
          }
          create: {
            args: Prisma.HistoricoOrcamentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload>
          }
          createMany: {
            args: Prisma.HistoricoOrcamentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.HistoricoOrcamentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload>
          }
          update: {
            args: Prisma.HistoricoOrcamentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload>
          }
          deleteMany: {
            args: Prisma.HistoricoOrcamentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistoricoOrcamentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HistoricoOrcamentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricoOrcamentoPayload>
          }
          aggregate: {
            args: Prisma.HistoricoOrcamentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistoricoOrcamento>
          }
          groupBy: {
            args: Prisma.HistoricoOrcamentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistoricoOrcamentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoricoOrcamentoCountArgs<ExtArgs>
            result: $Utils.Optional<HistoricoOrcamentoCountAggregateOutputType> | number
          }
        }
      }
      Relatorio: {
        payload: Prisma.$RelatorioPayload<ExtArgs>
        fields: Prisma.RelatorioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelatorioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelatorioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload>
          }
          findFirst: {
            args: Prisma.RelatorioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelatorioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload>
          }
          findMany: {
            args: Prisma.RelatorioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload>[]
          }
          create: {
            args: Prisma.RelatorioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload>
          }
          createMany: {
            args: Prisma.RelatorioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RelatorioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload>
          }
          update: {
            args: Prisma.RelatorioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload>
          }
          deleteMany: {
            args: Prisma.RelatorioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelatorioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RelatorioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioPayload>
          }
          aggregate: {
            args: Prisma.RelatorioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelatorio>
          }
          groupBy: {
            args: Prisma.RelatorioGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelatorioGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelatorioCountArgs<ExtArgs>
            result: $Utils.Optional<RelatorioCountAggregateOutputType> | number
          }
        }
      }
      RelatorioJson: {
        payload: Prisma.$RelatorioJsonPayload<ExtArgs>
        fields: Prisma.RelatorioJsonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelatorioJsonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelatorioJsonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload>
          }
          findFirst: {
            args: Prisma.RelatorioJsonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelatorioJsonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload>
          }
          findMany: {
            args: Prisma.RelatorioJsonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload>[]
          }
          create: {
            args: Prisma.RelatorioJsonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload>
          }
          createMany: {
            args: Prisma.RelatorioJsonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RelatorioJsonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload>
          }
          update: {
            args: Prisma.RelatorioJsonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload>
          }
          deleteMany: {
            args: Prisma.RelatorioJsonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelatorioJsonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RelatorioJsonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatorioJsonPayload>
          }
          aggregate: {
            args: Prisma.RelatorioJsonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelatorioJson>
          }
          groupBy: {
            args: Prisma.RelatorioJsonGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelatorioJsonGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelatorioJsonCountArgs<ExtArgs>
            result: $Utils.Optional<RelatorioJsonCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    transacoes: number
    orcamentos: number
    relatorios: number
    relatoriosJson: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transacoes?: boolean | UsuarioCountOutputTypeCountTransacoesArgs
    orcamentos?: boolean | UsuarioCountOutputTypeCountOrcamentosArgs
    relatorios?: boolean | UsuarioCountOutputTypeCountRelatoriosArgs
    relatoriosJson?: boolean | UsuarioCountOutputTypeCountRelatoriosJsonArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountTransacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransacaoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountOrcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrcamentoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountRelatoriosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatorioWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountRelatoriosJsonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatorioJsonWhereInput
  }


  /**
   * Count Type CategoriaCountOutputType
   */

  export type CategoriaCountOutputType = {
    subcategorias: number
    orcamentos: number
  }

  export type CategoriaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subcategorias?: boolean | CategoriaCountOutputTypeCountSubcategoriasArgs
    orcamentos?: boolean | CategoriaCountOutputTypeCountOrcamentosArgs
  }

  // Custom InputTypes
  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriaCountOutputType
     */
    select?: CategoriaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountSubcategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubcategoriaWhereInput
  }

  /**
   * CategoriaCountOutputType without action
   */
  export type CategoriaCountOutputTypeCountOrcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrcamentoWhereInput
  }


  /**
   * Count Type OrcamentoCountOutputType
   */

  export type OrcamentoCountOutputType = {
    historicoOrcamentos: number
  }

  export type OrcamentoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historicoOrcamentos?: boolean | OrcamentoCountOutputTypeCountHistoricoOrcamentosArgs
  }

  // Custom InputTypes
  /**
   * OrcamentoCountOutputType without action
   */
  export type OrcamentoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrcamentoCountOutputType
     */
    select?: OrcamentoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrcamentoCountOutputType without action
   */
  export type OrcamentoCountOutputTypeCountHistoricoOrcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricoOrcamentoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    transacoes?: boolean | Usuario$transacoesArgs<ExtArgs>
    orcamentos?: boolean | Usuario$orcamentosArgs<ExtArgs>
    relatorios?: boolean | Usuario$relatoriosArgs<ExtArgs>
    relatoriosJson?: boolean | Usuario$relatoriosJsonArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>


  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transacoes?: boolean | Usuario$transacoesArgs<ExtArgs>
    orcamentos?: boolean | Usuario$orcamentosArgs<ExtArgs>
    relatorios?: boolean | Usuario$relatoriosArgs<ExtArgs>
    relatoriosJson?: boolean | Usuario$relatoriosJsonArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      transacoes: Prisma.$TransacaoPayload<ExtArgs>[]
      orcamentos: Prisma.$OrcamentoPayload<ExtArgs>[]
      relatorios: Prisma.$RelatorioPayload<ExtArgs>[]
      relatoriosJson: Prisma.$RelatorioJsonPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transacoes<T extends Usuario$transacoesArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$transacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findMany"> | Null>
    orcamentos<T extends Usuario$orcamentosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$orcamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "findMany"> | Null>
    relatorios<T extends Usuario$relatoriosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$relatoriosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "findMany"> | Null>
    relatoriosJson<T extends Usuario$relatoriosJsonArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$relatoriosJsonArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.transacoes
   */
  export type Usuario$transacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    where?: TransacaoWhereInput
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    cursor?: TransacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransacaoScalarFieldEnum | TransacaoScalarFieldEnum[]
  }

  /**
   * Usuario.orcamentos
   */
  export type Usuario$orcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    where?: OrcamentoWhereInput
    orderBy?: OrcamentoOrderByWithRelationInput | OrcamentoOrderByWithRelationInput[]
    cursor?: OrcamentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrcamentoScalarFieldEnum | OrcamentoScalarFieldEnum[]
  }

  /**
   * Usuario.relatorios
   */
  export type Usuario$relatoriosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    where?: RelatorioWhereInput
    orderBy?: RelatorioOrderByWithRelationInput | RelatorioOrderByWithRelationInput[]
    cursor?: RelatorioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatorioScalarFieldEnum | RelatorioScalarFieldEnum[]
  }

  /**
   * Usuario.relatoriosJson
   */
  export type Usuario$relatoriosJsonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    where?: RelatorioJsonWhereInput
    orderBy?: RelatorioJsonOrderByWithRelationInput | RelatorioJsonOrderByWithRelationInput[]
    cursor?: RelatorioJsonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatorioJsonScalarFieldEnum | RelatorioJsonScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Transacao
   */

  export type AggregateTransacao = {
    _count: TransacaoCountAggregateOutputType | null
    _avg: TransacaoAvgAggregateOutputType | null
    _sum: TransacaoSumAggregateOutputType | null
    _min: TransacaoMinAggregateOutputType | null
    _max: TransacaoMaxAggregateOutputType | null
  }

  export type TransacaoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    valor: number | null
  }

  export type TransacaoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    valor: number | null
  }

  export type TransacaoMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    data: Date | null
    descricao: string | null
    categoria: $Enums.CategoriaEnum | null
    valor: number | null
    tags: string | null
  }

  export type TransacaoMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    data: Date | null
    descricao: string | null
    categoria: $Enums.CategoriaEnum | null
    valor: number | null
    tags: string | null
  }

  export type TransacaoCountAggregateOutputType = {
    id: number
    usuarioId: number
    data: number
    descricao: number
    categoria: number
    valor: number
    tags: number
    _all: number
  }


  export type TransacaoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    valor?: true
  }

  export type TransacaoSumAggregateInputType = {
    id?: true
    usuarioId?: true
    valor?: true
  }

  export type TransacaoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    data?: true
    descricao?: true
    categoria?: true
    valor?: true
    tags?: true
  }

  export type TransacaoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    data?: true
    descricao?: true
    categoria?: true
    valor?: true
    tags?: true
  }

  export type TransacaoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    data?: true
    descricao?: true
    categoria?: true
    valor?: true
    tags?: true
    _all?: true
  }

  export type TransacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transacao to aggregate.
     */
    where?: TransacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transacaos to fetch.
     */
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transacaos
    **/
    _count?: true | TransacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransacaoMaxAggregateInputType
  }

  export type GetTransacaoAggregateType<T extends TransacaoAggregateArgs> = {
        [P in keyof T & keyof AggregateTransacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransacao[P]>
      : GetScalarType<T[P], AggregateTransacao[P]>
  }




  export type TransacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransacaoWhereInput
    orderBy?: TransacaoOrderByWithAggregationInput | TransacaoOrderByWithAggregationInput[]
    by: TransacaoScalarFieldEnum[] | TransacaoScalarFieldEnum
    having?: TransacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransacaoCountAggregateInputType | true
    _avg?: TransacaoAvgAggregateInputType
    _sum?: TransacaoSumAggregateInputType
    _min?: TransacaoMinAggregateInputType
    _max?: TransacaoMaxAggregateInputType
  }

  export type TransacaoGroupByOutputType = {
    id: number
    usuarioId: number
    data: Date
    descricao: string
    categoria: $Enums.CategoriaEnum
    valor: number
    tags: string | null
    _count: TransacaoCountAggregateOutputType | null
    _avg: TransacaoAvgAggregateOutputType | null
    _sum: TransacaoSumAggregateOutputType | null
    _min: TransacaoMinAggregateOutputType | null
    _max: TransacaoMaxAggregateOutputType | null
  }

  type GetTransacaoGroupByPayload<T extends TransacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransacaoGroupByOutputType[P]>
            : GetScalarType<T[P], TransacaoGroupByOutputType[P]>
        }
      >
    >


  export type TransacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    data?: boolean
    descricao?: boolean
    categoria?: boolean
    valor?: boolean
    tags?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transacao"]>


  export type TransacaoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    data?: boolean
    descricao?: boolean
    categoria?: boolean
    valor?: boolean
    tags?: boolean
  }

  export type TransacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $TransacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transacao"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      data: Date
      descricao: string
      categoria: $Enums.CategoriaEnum
      valor: number
      tags: string | null
    }, ExtArgs["result"]["transacao"]>
    composites: {}
  }

  type TransacaoGetPayload<S extends boolean | null | undefined | TransacaoDefaultArgs> = $Result.GetResult<Prisma.$TransacaoPayload, S>

  type TransacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransacaoCountAggregateInputType | true
    }

  export interface TransacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transacao'], meta: { name: 'Transacao' } }
    /**
     * Find zero or one Transacao that matches the filter.
     * @param {TransacaoFindUniqueArgs} args - Arguments to find a Transacao
     * @example
     * // Get one Transacao
     * const transacao = await prisma.transacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransacaoFindUniqueArgs>(args: SelectSubset<T, TransacaoFindUniqueArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TransacaoFindUniqueOrThrowArgs} args - Arguments to find a Transacao
     * @example
     * // Get one Transacao
     * const transacao = await prisma.transacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, TransacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoFindFirstArgs} args - Arguments to find a Transacao
     * @example
     * // Get one Transacao
     * const transacao = await prisma.transacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransacaoFindFirstArgs>(args?: SelectSubset<T, TransacaoFindFirstArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoFindFirstOrThrowArgs} args - Arguments to find a Transacao
     * @example
     * // Get one Transacao
     * const transacao = await prisma.transacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, TransacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transacaos
     * const transacaos = await prisma.transacao.findMany()
     * 
     * // Get first 10 Transacaos
     * const transacaos = await prisma.transacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transacaoWithIdOnly = await prisma.transacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransacaoFindManyArgs>(args?: SelectSubset<T, TransacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transacao.
     * @param {TransacaoCreateArgs} args - Arguments to create a Transacao.
     * @example
     * // Create one Transacao
     * const Transacao = await prisma.transacao.create({
     *   data: {
     *     // ... data to create a Transacao
     *   }
     * })
     * 
     */
    create<T extends TransacaoCreateArgs>(args: SelectSubset<T, TransacaoCreateArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transacaos.
     * @param {TransacaoCreateManyArgs} args - Arguments to create many Transacaos.
     * @example
     * // Create many Transacaos
     * const transacao = await prisma.transacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransacaoCreateManyArgs>(args?: SelectSubset<T, TransacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transacao.
     * @param {TransacaoDeleteArgs} args - Arguments to delete one Transacao.
     * @example
     * // Delete one Transacao
     * const Transacao = await prisma.transacao.delete({
     *   where: {
     *     // ... filter to delete one Transacao
     *   }
     * })
     * 
     */
    delete<T extends TransacaoDeleteArgs>(args: SelectSubset<T, TransacaoDeleteArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transacao.
     * @param {TransacaoUpdateArgs} args - Arguments to update one Transacao.
     * @example
     * // Update one Transacao
     * const transacao = await prisma.transacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransacaoUpdateArgs>(args: SelectSubset<T, TransacaoUpdateArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transacaos.
     * @param {TransacaoDeleteManyArgs} args - Arguments to filter Transacaos to delete.
     * @example
     * // Delete a few Transacaos
     * const { count } = await prisma.transacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransacaoDeleteManyArgs>(args?: SelectSubset<T, TransacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transacaos
     * const transacao = await prisma.transacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransacaoUpdateManyArgs>(args: SelectSubset<T, TransacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transacao.
     * @param {TransacaoUpsertArgs} args - Arguments to update or create a Transacao.
     * @example
     * // Update or create a Transacao
     * const transacao = await prisma.transacao.upsert({
     *   create: {
     *     // ... data to create a Transacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transacao we want to update
     *   }
     * })
     */
    upsert<T extends TransacaoUpsertArgs>(args: SelectSubset<T, TransacaoUpsertArgs<ExtArgs>>): Prisma__TransacaoClient<$Result.GetResult<Prisma.$TransacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoCountArgs} args - Arguments to filter Transacaos to count.
     * @example
     * // Count the number of Transacaos
     * const count = await prisma.transacao.count({
     *   where: {
     *     // ... the filter for the Transacaos we want to count
     *   }
     * })
    **/
    count<T extends TransacaoCountArgs>(
      args?: Subset<T, TransacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransacaoAggregateArgs>(args: Subset<T, TransacaoAggregateArgs>): Prisma.PrismaPromise<GetTransacaoAggregateType<T>>

    /**
     * Group by Transacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransacaoGroupByArgs['orderBy'] }
        : { orderBy?: TransacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transacao model
   */
  readonly fields: TransacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transacao model
   */ 
  interface TransacaoFieldRefs {
    readonly id: FieldRef<"Transacao", 'Int'>
    readonly usuarioId: FieldRef<"Transacao", 'Int'>
    readonly data: FieldRef<"Transacao", 'DateTime'>
    readonly descricao: FieldRef<"Transacao", 'String'>
    readonly categoria: FieldRef<"Transacao", 'CategoriaEnum'>
    readonly valor: FieldRef<"Transacao", 'Float'>
    readonly tags: FieldRef<"Transacao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Transacao findUnique
   */
  export type TransacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacao to fetch.
     */
    where: TransacaoWhereUniqueInput
  }

  /**
   * Transacao findUniqueOrThrow
   */
  export type TransacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacao to fetch.
     */
    where: TransacaoWhereUniqueInput
  }

  /**
   * Transacao findFirst
   */
  export type TransacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacao to fetch.
     */
    where?: TransacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transacaos to fetch.
     */
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transacaos.
     */
    cursor?: TransacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transacaos.
     */
    distinct?: TransacaoScalarFieldEnum | TransacaoScalarFieldEnum[]
  }

  /**
   * Transacao findFirstOrThrow
   */
  export type TransacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacao to fetch.
     */
    where?: TransacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transacaos to fetch.
     */
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transacaos.
     */
    cursor?: TransacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transacaos.
     */
    distinct?: TransacaoScalarFieldEnum | TransacaoScalarFieldEnum[]
  }

  /**
   * Transacao findMany
   */
  export type TransacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter, which Transacaos to fetch.
     */
    where?: TransacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transacaos to fetch.
     */
    orderBy?: TransacaoOrderByWithRelationInput | TransacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transacaos.
     */
    cursor?: TransacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transacaos.
     */
    skip?: number
    distinct?: TransacaoScalarFieldEnum | TransacaoScalarFieldEnum[]
  }

  /**
   * Transacao create
   */
  export type TransacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Transacao.
     */
    data: XOR<TransacaoCreateInput, TransacaoUncheckedCreateInput>
  }

  /**
   * Transacao createMany
   */
  export type TransacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transacaos.
     */
    data: TransacaoCreateManyInput | TransacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transacao update
   */
  export type TransacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Transacao.
     */
    data: XOR<TransacaoUpdateInput, TransacaoUncheckedUpdateInput>
    /**
     * Choose, which Transacao to update.
     */
    where: TransacaoWhereUniqueInput
  }

  /**
   * Transacao updateMany
   */
  export type TransacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transacaos.
     */
    data: XOR<TransacaoUpdateManyMutationInput, TransacaoUncheckedUpdateManyInput>
    /**
     * Filter which Transacaos to update
     */
    where?: TransacaoWhereInput
  }

  /**
   * Transacao upsert
   */
  export type TransacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Transacao to update in case it exists.
     */
    where: TransacaoWhereUniqueInput
    /**
     * In case the Transacao found by the `where` argument doesn't exist, create a new Transacao with this data.
     */
    create: XOR<TransacaoCreateInput, TransacaoUncheckedCreateInput>
    /**
     * In case the Transacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransacaoUpdateInput, TransacaoUncheckedUpdateInput>
  }

  /**
   * Transacao delete
   */
  export type TransacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
    /**
     * Filter which Transacao to delete.
     */
    where: TransacaoWhereUniqueInput
  }

  /**
   * Transacao deleteMany
   */
  export type TransacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transacaos to delete
     */
    where?: TransacaoWhereInput
  }

  /**
   * Transacao without action
   */
  export type TransacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transacao
     */
    select?: TransacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransacaoInclude<ExtArgs> | null
  }


  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriaSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    tipo: $Enums.TipoCategoriaEnum | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    tipo: $Enums.TipoCategoriaEnum | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    nome: number
    tipo: number
    _all: number
  }


  export type CategoriaAvgAggregateInputType = {
    id?: true
  }

  export type CategoriaSumAggregateInputType = {
    id?: true
  }

  export type CategoriaMinAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    nome?: true
    tipo?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _avg?: CategoriaAvgAggregateInputType
    _sum?: CategoriaSumAggregateInputType
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id: number
    nome: string
    tipo: $Enums.TipoCategoriaEnum
    _count: CategoriaCountAggregateOutputType | null
    _avg: CategoriaAvgAggregateOutputType | null
    _sum: CategoriaSumAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    tipo?: boolean
    subcategorias?: boolean | Categoria$subcategoriasArgs<ExtArgs>
    orcamentos?: boolean | Categoria$orcamentosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>


  export type CategoriaSelectScalar = {
    id?: boolean
    nome?: boolean
    tipo?: boolean
  }

  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subcategorias?: boolean | Categoria$subcategoriasArgs<ExtArgs>
    orcamentos?: boolean | Categoria$orcamentosArgs<ExtArgs>
    _count?: boolean | CategoriaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      subcategorias: Prisma.$SubcategoriaPayload<ExtArgs>[]
      orcamentos: Prisma.$OrcamentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      tipo: $Enums.TipoCategoriaEnum
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }

  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaFindUniqueArgs>(args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaFindFirstArgs>(args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaFindManyArgs>(args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
     */
    create<T extends CategoriaCreateArgs>(args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categorias.
     * @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaCreateManyArgs>(args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
     */
    delete<T extends CategoriaDeleteArgs>(args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaUpdateArgs>(args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaDeleteManyArgs>(args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaUpdateManyArgs>(args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaUpsertArgs>(args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subcategorias<T extends Categoria$subcategoriasArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$subcategoriasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "findMany"> | Null>
    orcamentos<T extends Categoria$orcamentosArgs<ExtArgs> = {}>(args?: Subset<T, Categoria$orcamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categoria model
   */ 
  interface CategoriaFieldRefs {
    readonly id: FieldRef<"Categoria", 'Int'>
    readonly nome: FieldRef<"Categoria", 'String'>
    readonly tipo: FieldRef<"Categoria", 'TipoCategoriaEnum'>
  }
    

  // Custom InputTypes
  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }

  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }

  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria.subcategorias
   */
  export type Categoria$subcategoriasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    where?: SubcategoriaWhereInput
    orderBy?: SubcategoriaOrderByWithRelationInput | SubcategoriaOrderByWithRelationInput[]
    cursor?: SubcategoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubcategoriaScalarFieldEnum | SubcategoriaScalarFieldEnum[]
  }

  /**
   * Categoria.orcamentos
   */
  export type Categoria$orcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    where?: OrcamentoWhereInput
    orderBy?: OrcamentoOrderByWithRelationInput | OrcamentoOrderByWithRelationInput[]
    cursor?: OrcamentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrcamentoScalarFieldEnum | OrcamentoScalarFieldEnum[]
  }

  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Subcategoria
   */

  export type AggregateSubcategoria = {
    _count: SubcategoriaCountAggregateOutputType | null
    _avg: SubcategoriaAvgAggregateOutputType | null
    _sum: SubcategoriaSumAggregateOutputType | null
    _min: SubcategoriaMinAggregateOutputType | null
    _max: SubcategoriaMaxAggregateOutputType | null
  }

  export type SubcategoriaAvgAggregateOutputType = {
    id: number | null
    categoriaId: number | null
  }

  export type SubcategoriaSumAggregateOutputType = {
    id: number | null
    categoriaId: number | null
  }

  export type SubcategoriaMinAggregateOutputType = {
    id: number | null
    categoriaId: number | null
    nome: string | null
  }

  export type SubcategoriaMaxAggregateOutputType = {
    id: number | null
    categoriaId: number | null
    nome: string | null
  }

  export type SubcategoriaCountAggregateOutputType = {
    id: number
    categoriaId: number
    nome: number
    _all: number
  }


  export type SubcategoriaAvgAggregateInputType = {
    id?: true
    categoriaId?: true
  }

  export type SubcategoriaSumAggregateInputType = {
    id?: true
    categoriaId?: true
  }

  export type SubcategoriaMinAggregateInputType = {
    id?: true
    categoriaId?: true
    nome?: true
  }

  export type SubcategoriaMaxAggregateInputType = {
    id?: true
    categoriaId?: true
    nome?: true
  }

  export type SubcategoriaCountAggregateInputType = {
    id?: true
    categoriaId?: true
    nome?: true
    _all?: true
  }

  export type SubcategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subcategoria to aggregate.
     */
    where?: SubcategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcategorias to fetch.
     */
    orderBy?: SubcategoriaOrderByWithRelationInput | SubcategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubcategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subcategorias
    **/
    _count?: true | SubcategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubcategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubcategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubcategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubcategoriaMaxAggregateInputType
  }

  export type GetSubcategoriaAggregateType<T extends SubcategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateSubcategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubcategoria[P]>
      : GetScalarType<T[P], AggregateSubcategoria[P]>
  }




  export type SubcategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubcategoriaWhereInput
    orderBy?: SubcategoriaOrderByWithAggregationInput | SubcategoriaOrderByWithAggregationInput[]
    by: SubcategoriaScalarFieldEnum[] | SubcategoriaScalarFieldEnum
    having?: SubcategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubcategoriaCountAggregateInputType | true
    _avg?: SubcategoriaAvgAggregateInputType
    _sum?: SubcategoriaSumAggregateInputType
    _min?: SubcategoriaMinAggregateInputType
    _max?: SubcategoriaMaxAggregateInputType
  }

  export type SubcategoriaGroupByOutputType = {
    id: number
    categoriaId: number
    nome: string
    _count: SubcategoriaCountAggregateOutputType | null
    _avg: SubcategoriaAvgAggregateOutputType | null
    _sum: SubcategoriaSumAggregateOutputType | null
    _min: SubcategoriaMinAggregateOutputType | null
    _max: SubcategoriaMaxAggregateOutputType | null
  }

  type GetSubcategoriaGroupByPayload<T extends SubcategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubcategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubcategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubcategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], SubcategoriaGroupByOutputType[P]>
        }
      >
    >


  export type SubcategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoriaId?: boolean
    nome?: boolean
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subcategoria"]>


  export type SubcategoriaSelectScalar = {
    id?: boolean
    categoriaId?: boolean
    nome?: boolean
  }

  export type SubcategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
  }

  export type $SubcategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subcategoria"
    objects: {
      categoria: Prisma.$CategoriaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoriaId: number
      nome: string
    }, ExtArgs["result"]["subcategoria"]>
    composites: {}
  }

  type SubcategoriaGetPayload<S extends boolean | null | undefined | SubcategoriaDefaultArgs> = $Result.GetResult<Prisma.$SubcategoriaPayload, S>

  type SubcategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubcategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubcategoriaCountAggregateInputType | true
    }

  export interface SubcategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subcategoria'], meta: { name: 'Subcategoria' } }
    /**
     * Find zero or one Subcategoria that matches the filter.
     * @param {SubcategoriaFindUniqueArgs} args - Arguments to find a Subcategoria
     * @example
     * // Get one Subcategoria
     * const subcategoria = await prisma.subcategoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubcategoriaFindUniqueArgs>(args: SelectSubset<T, SubcategoriaFindUniqueArgs<ExtArgs>>): Prisma__SubcategoriaClient<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subcategoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubcategoriaFindUniqueOrThrowArgs} args - Arguments to find a Subcategoria
     * @example
     * // Get one Subcategoria
     * const subcategoria = await prisma.subcategoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubcategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, SubcategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubcategoriaClient<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subcategoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoriaFindFirstArgs} args - Arguments to find a Subcategoria
     * @example
     * // Get one Subcategoria
     * const subcategoria = await prisma.subcategoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubcategoriaFindFirstArgs>(args?: SelectSubset<T, SubcategoriaFindFirstArgs<ExtArgs>>): Prisma__SubcategoriaClient<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subcategoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoriaFindFirstOrThrowArgs} args - Arguments to find a Subcategoria
     * @example
     * // Get one Subcategoria
     * const subcategoria = await prisma.subcategoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubcategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, SubcategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubcategoriaClient<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subcategorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subcategorias
     * const subcategorias = await prisma.subcategoria.findMany()
     * 
     * // Get first 10 Subcategorias
     * const subcategorias = await prisma.subcategoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subcategoriaWithIdOnly = await prisma.subcategoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubcategoriaFindManyArgs>(args?: SelectSubset<T, SubcategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subcategoria.
     * @param {SubcategoriaCreateArgs} args - Arguments to create a Subcategoria.
     * @example
     * // Create one Subcategoria
     * const Subcategoria = await prisma.subcategoria.create({
     *   data: {
     *     // ... data to create a Subcategoria
     *   }
     * })
     * 
     */
    create<T extends SubcategoriaCreateArgs>(args: SelectSubset<T, SubcategoriaCreateArgs<ExtArgs>>): Prisma__SubcategoriaClient<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subcategorias.
     * @param {SubcategoriaCreateManyArgs} args - Arguments to create many Subcategorias.
     * @example
     * // Create many Subcategorias
     * const subcategoria = await prisma.subcategoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubcategoriaCreateManyArgs>(args?: SelectSubset<T, SubcategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subcategoria.
     * @param {SubcategoriaDeleteArgs} args - Arguments to delete one Subcategoria.
     * @example
     * // Delete one Subcategoria
     * const Subcategoria = await prisma.subcategoria.delete({
     *   where: {
     *     // ... filter to delete one Subcategoria
     *   }
     * })
     * 
     */
    delete<T extends SubcategoriaDeleteArgs>(args: SelectSubset<T, SubcategoriaDeleteArgs<ExtArgs>>): Prisma__SubcategoriaClient<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subcategoria.
     * @param {SubcategoriaUpdateArgs} args - Arguments to update one Subcategoria.
     * @example
     * // Update one Subcategoria
     * const subcategoria = await prisma.subcategoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubcategoriaUpdateArgs>(args: SelectSubset<T, SubcategoriaUpdateArgs<ExtArgs>>): Prisma__SubcategoriaClient<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subcategorias.
     * @param {SubcategoriaDeleteManyArgs} args - Arguments to filter Subcategorias to delete.
     * @example
     * // Delete a few Subcategorias
     * const { count } = await prisma.subcategoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubcategoriaDeleteManyArgs>(args?: SelectSubset<T, SubcategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subcategorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subcategorias
     * const subcategoria = await prisma.subcategoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubcategoriaUpdateManyArgs>(args: SelectSubset<T, SubcategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subcategoria.
     * @param {SubcategoriaUpsertArgs} args - Arguments to update or create a Subcategoria.
     * @example
     * // Update or create a Subcategoria
     * const subcategoria = await prisma.subcategoria.upsert({
     *   create: {
     *     // ... data to create a Subcategoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subcategoria we want to update
     *   }
     * })
     */
    upsert<T extends SubcategoriaUpsertArgs>(args: SelectSubset<T, SubcategoriaUpsertArgs<ExtArgs>>): Prisma__SubcategoriaClient<$Result.GetResult<Prisma.$SubcategoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subcategorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoriaCountArgs} args - Arguments to filter Subcategorias to count.
     * @example
     * // Count the number of Subcategorias
     * const count = await prisma.subcategoria.count({
     *   where: {
     *     // ... the filter for the Subcategorias we want to count
     *   }
     * })
    **/
    count<T extends SubcategoriaCountArgs>(
      args?: Subset<T, SubcategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubcategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subcategoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubcategoriaAggregateArgs>(args: Subset<T, SubcategoriaAggregateArgs>): Prisma.PrismaPromise<GetSubcategoriaAggregateType<T>>

    /**
     * Group by Subcategoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubcategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubcategoriaGroupByArgs['orderBy'] }
        : { orderBy?: SubcategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubcategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubcategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subcategoria model
   */
  readonly fields: SubcategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subcategoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubcategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categoria<T extends CategoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaDefaultArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subcategoria model
   */ 
  interface SubcategoriaFieldRefs {
    readonly id: FieldRef<"Subcategoria", 'Int'>
    readonly categoriaId: FieldRef<"Subcategoria", 'Int'>
    readonly nome: FieldRef<"Subcategoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Subcategoria findUnique
   */
  export type SubcategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Subcategoria to fetch.
     */
    where: SubcategoriaWhereUniqueInput
  }

  /**
   * Subcategoria findUniqueOrThrow
   */
  export type SubcategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Subcategoria to fetch.
     */
    where: SubcategoriaWhereUniqueInput
  }

  /**
   * Subcategoria findFirst
   */
  export type SubcategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Subcategoria to fetch.
     */
    where?: SubcategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcategorias to fetch.
     */
    orderBy?: SubcategoriaOrderByWithRelationInput | SubcategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subcategorias.
     */
    cursor?: SubcategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subcategorias.
     */
    distinct?: SubcategoriaScalarFieldEnum | SubcategoriaScalarFieldEnum[]
  }

  /**
   * Subcategoria findFirstOrThrow
   */
  export type SubcategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Subcategoria to fetch.
     */
    where?: SubcategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcategorias to fetch.
     */
    orderBy?: SubcategoriaOrderByWithRelationInput | SubcategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subcategorias.
     */
    cursor?: SubcategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subcategorias.
     */
    distinct?: SubcategoriaScalarFieldEnum | SubcategoriaScalarFieldEnum[]
  }

  /**
   * Subcategoria findMany
   */
  export type SubcategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Subcategorias to fetch.
     */
    where?: SubcategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcategorias to fetch.
     */
    orderBy?: SubcategoriaOrderByWithRelationInput | SubcategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subcategorias.
     */
    cursor?: SubcategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcategorias.
     */
    skip?: number
    distinct?: SubcategoriaScalarFieldEnum | SubcategoriaScalarFieldEnum[]
  }

  /**
   * Subcategoria create
   */
  export type SubcategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Subcategoria.
     */
    data: XOR<SubcategoriaCreateInput, SubcategoriaUncheckedCreateInput>
  }

  /**
   * Subcategoria createMany
   */
  export type SubcategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subcategorias.
     */
    data: SubcategoriaCreateManyInput | SubcategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subcategoria update
   */
  export type SubcategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Subcategoria.
     */
    data: XOR<SubcategoriaUpdateInput, SubcategoriaUncheckedUpdateInput>
    /**
     * Choose, which Subcategoria to update.
     */
    where: SubcategoriaWhereUniqueInput
  }

  /**
   * Subcategoria updateMany
   */
  export type SubcategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subcategorias.
     */
    data: XOR<SubcategoriaUpdateManyMutationInput, SubcategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Subcategorias to update
     */
    where?: SubcategoriaWhereInput
  }

  /**
   * Subcategoria upsert
   */
  export type SubcategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Subcategoria to update in case it exists.
     */
    where: SubcategoriaWhereUniqueInput
    /**
     * In case the Subcategoria found by the `where` argument doesn't exist, create a new Subcategoria with this data.
     */
    create: XOR<SubcategoriaCreateInput, SubcategoriaUncheckedCreateInput>
    /**
     * In case the Subcategoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubcategoriaUpdateInput, SubcategoriaUncheckedUpdateInput>
  }

  /**
   * Subcategoria delete
   */
  export type SubcategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
    /**
     * Filter which Subcategoria to delete.
     */
    where: SubcategoriaWhereUniqueInput
  }

  /**
   * Subcategoria deleteMany
   */
  export type SubcategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subcategorias to delete
     */
    where?: SubcategoriaWhereInput
  }

  /**
   * Subcategoria without action
   */
  export type SubcategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcategoria
     */
    select?: SubcategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Orcamento
   */

  export type AggregateOrcamento = {
    _count: OrcamentoCountAggregateOutputType | null
    _avg: OrcamentoAvgAggregateOutputType | null
    _sum: OrcamentoSumAggregateOutputType | null
    _min: OrcamentoMinAggregateOutputType | null
    _max: OrcamentoMaxAggregateOutputType | null
  }

  export type OrcamentoAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    categoriaId: number | null
    valor: number | null
  }

  export type OrcamentoSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    categoriaId: number | null
    valor: number | null
  }

  export type OrcamentoMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    categoriaId: number | null
    valor: number | null
    dataInicio: Date | null
    dataFim: Date | null
  }

  export type OrcamentoMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    categoriaId: number | null
    valor: number | null
    dataInicio: Date | null
    dataFim: Date | null
  }

  export type OrcamentoCountAggregateOutputType = {
    id: number
    usuarioId: number
    categoriaId: number
    valor: number
    dataInicio: number
    dataFim: number
    _all: number
  }


  export type OrcamentoAvgAggregateInputType = {
    id?: true
    usuarioId?: true
    categoriaId?: true
    valor?: true
  }

  export type OrcamentoSumAggregateInputType = {
    id?: true
    usuarioId?: true
    categoriaId?: true
    valor?: true
  }

  export type OrcamentoMinAggregateInputType = {
    id?: true
    usuarioId?: true
    categoriaId?: true
    valor?: true
    dataInicio?: true
    dataFim?: true
  }

  export type OrcamentoMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    categoriaId?: true
    valor?: true
    dataInicio?: true
    dataFim?: true
  }

  export type OrcamentoCountAggregateInputType = {
    id?: true
    usuarioId?: true
    categoriaId?: true
    valor?: true
    dataInicio?: true
    dataFim?: true
    _all?: true
  }

  export type OrcamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orcamento to aggregate.
     */
    where?: OrcamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orcamentos to fetch.
     */
    orderBy?: OrcamentoOrderByWithRelationInput | OrcamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrcamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orcamentos
    **/
    _count?: true | OrcamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrcamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrcamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrcamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrcamentoMaxAggregateInputType
  }

  export type GetOrcamentoAggregateType<T extends OrcamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateOrcamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrcamento[P]>
      : GetScalarType<T[P], AggregateOrcamento[P]>
  }




  export type OrcamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrcamentoWhereInput
    orderBy?: OrcamentoOrderByWithAggregationInput | OrcamentoOrderByWithAggregationInput[]
    by: OrcamentoScalarFieldEnum[] | OrcamentoScalarFieldEnum
    having?: OrcamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrcamentoCountAggregateInputType | true
    _avg?: OrcamentoAvgAggregateInputType
    _sum?: OrcamentoSumAggregateInputType
    _min?: OrcamentoMinAggregateInputType
    _max?: OrcamentoMaxAggregateInputType
  }

  export type OrcamentoGroupByOutputType = {
    id: number
    usuarioId: number
    categoriaId: number
    valor: number
    dataInicio: Date
    dataFim: Date
    _count: OrcamentoCountAggregateOutputType | null
    _avg: OrcamentoAvgAggregateOutputType | null
    _sum: OrcamentoSumAggregateOutputType | null
    _min: OrcamentoMinAggregateOutputType | null
    _max: OrcamentoMaxAggregateOutputType | null
  }

  type GetOrcamentoGroupByPayload<T extends OrcamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrcamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrcamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrcamentoGroupByOutputType[P]>
            : GetScalarType<T[P], OrcamentoGroupByOutputType[P]>
        }
      >
    >


  export type OrcamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    categoriaId?: boolean
    valor?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    historicoOrcamentos?: boolean | Orcamento$historicoOrcamentosArgs<ExtArgs>
    _count?: boolean | OrcamentoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orcamento"]>


  export type OrcamentoSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    categoriaId?: boolean
    valor?: boolean
    dataInicio?: boolean
    dataFim?: boolean
  }

  export type OrcamentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    categoria?: boolean | CategoriaDefaultArgs<ExtArgs>
    historicoOrcamentos?: boolean | Orcamento$historicoOrcamentosArgs<ExtArgs>
    _count?: boolean | OrcamentoCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrcamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Orcamento"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      categoria: Prisma.$CategoriaPayload<ExtArgs>
      historicoOrcamentos: Prisma.$HistoricoOrcamentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      categoriaId: number
      valor: number
      dataInicio: Date
      dataFim: Date
    }, ExtArgs["result"]["orcamento"]>
    composites: {}
  }

  type OrcamentoGetPayload<S extends boolean | null | undefined | OrcamentoDefaultArgs> = $Result.GetResult<Prisma.$OrcamentoPayload, S>

  type OrcamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrcamentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrcamentoCountAggregateInputType | true
    }

  export interface OrcamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Orcamento'], meta: { name: 'Orcamento' } }
    /**
     * Find zero or one Orcamento that matches the filter.
     * @param {OrcamentoFindUniqueArgs} args - Arguments to find a Orcamento
     * @example
     * // Get one Orcamento
     * const orcamento = await prisma.orcamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrcamentoFindUniqueArgs>(args: SelectSubset<T, OrcamentoFindUniqueArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Orcamento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrcamentoFindUniqueOrThrowArgs} args - Arguments to find a Orcamento
     * @example
     * // Get one Orcamento
     * const orcamento = await prisma.orcamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrcamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, OrcamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Orcamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrcamentoFindFirstArgs} args - Arguments to find a Orcamento
     * @example
     * // Get one Orcamento
     * const orcamento = await prisma.orcamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrcamentoFindFirstArgs>(args?: SelectSubset<T, OrcamentoFindFirstArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Orcamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrcamentoFindFirstOrThrowArgs} args - Arguments to find a Orcamento
     * @example
     * // Get one Orcamento
     * const orcamento = await prisma.orcamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrcamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, OrcamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orcamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrcamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orcamentos
     * const orcamentos = await prisma.orcamento.findMany()
     * 
     * // Get first 10 Orcamentos
     * const orcamentos = await prisma.orcamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orcamentoWithIdOnly = await prisma.orcamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrcamentoFindManyArgs>(args?: SelectSubset<T, OrcamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Orcamento.
     * @param {OrcamentoCreateArgs} args - Arguments to create a Orcamento.
     * @example
     * // Create one Orcamento
     * const Orcamento = await prisma.orcamento.create({
     *   data: {
     *     // ... data to create a Orcamento
     *   }
     * })
     * 
     */
    create<T extends OrcamentoCreateArgs>(args: SelectSubset<T, OrcamentoCreateArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orcamentos.
     * @param {OrcamentoCreateManyArgs} args - Arguments to create many Orcamentos.
     * @example
     * // Create many Orcamentos
     * const orcamento = await prisma.orcamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrcamentoCreateManyArgs>(args?: SelectSubset<T, OrcamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orcamento.
     * @param {OrcamentoDeleteArgs} args - Arguments to delete one Orcamento.
     * @example
     * // Delete one Orcamento
     * const Orcamento = await prisma.orcamento.delete({
     *   where: {
     *     // ... filter to delete one Orcamento
     *   }
     * })
     * 
     */
    delete<T extends OrcamentoDeleteArgs>(args: SelectSubset<T, OrcamentoDeleteArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Orcamento.
     * @param {OrcamentoUpdateArgs} args - Arguments to update one Orcamento.
     * @example
     * // Update one Orcamento
     * const orcamento = await prisma.orcamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrcamentoUpdateArgs>(args: SelectSubset<T, OrcamentoUpdateArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orcamentos.
     * @param {OrcamentoDeleteManyArgs} args - Arguments to filter Orcamentos to delete.
     * @example
     * // Delete a few Orcamentos
     * const { count } = await prisma.orcamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrcamentoDeleteManyArgs>(args?: SelectSubset<T, OrcamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orcamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrcamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orcamentos
     * const orcamento = await prisma.orcamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrcamentoUpdateManyArgs>(args: SelectSubset<T, OrcamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orcamento.
     * @param {OrcamentoUpsertArgs} args - Arguments to update or create a Orcamento.
     * @example
     * // Update or create a Orcamento
     * const orcamento = await prisma.orcamento.upsert({
     *   create: {
     *     // ... data to create a Orcamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orcamento we want to update
     *   }
     * })
     */
    upsert<T extends OrcamentoUpsertArgs>(args: SelectSubset<T, OrcamentoUpsertArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orcamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrcamentoCountArgs} args - Arguments to filter Orcamentos to count.
     * @example
     * // Count the number of Orcamentos
     * const count = await prisma.orcamento.count({
     *   where: {
     *     // ... the filter for the Orcamentos we want to count
     *   }
     * })
    **/
    count<T extends OrcamentoCountArgs>(
      args?: Subset<T, OrcamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrcamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orcamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrcamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrcamentoAggregateArgs>(args: Subset<T, OrcamentoAggregateArgs>): Prisma.PrismaPromise<GetOrcamentoAggregateType<T>>

    /**
     * Group by Orcamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrcamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrcamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrcamentoGroupByArgs['orderBy'] }
        : { orderBy?: OrcamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrcamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrcamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Orcamento model
   */
  readonly fields: OrcamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Orcamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrcamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    categoria<T extends CategoriaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriaDefaultArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    historicoOrcamentos<T extends Orcamento$historicoOrcamentosArgs<ExtArgs> = {}>(args?: Subset<T, Orcamento$historicoOrcamentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Orcamento model
   */ 
  interface OrcamentoFieldRefs {
    readonly id: FieldRef<"Orcamento", 'Int'>
    readonly usuarioId: FieldRef<"Orcamento", 'Int'>
    readonly categoriaId: FieldRef<"Orcamento", 'Int'>
    readonly valor: FieldRef<"Orcamento", 'Float'>
    readonly dataInicio: FieldRef<"Orcamento", 'DateTime'>
    readonly dataFim: FieldRef<"Orcamento", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Orcamento findUnique
   */
  export type OrcamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which Orcamento to fetch.
     */
    where: OrcamentoWhereUniqueInput
  }

  /**
   * Orcamento findUniqueOrThrow
   */
  export type OrcamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which Orcamento to fetch.
     */
    where: OrcamentoWhereUniqueInput
  }

  /**
   * Orcamento findFirst
   */
  export type OrcamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which Orcamento to fetch.
     */
    where?: OrcamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orcamentos to fetch.
     */
    orderBy?: OrcamentoOrderByWithRelationInput | OrcamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orcamentos.
     */
    cursor?: OrcamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orcamentos.
     */
    distinct?: OrcamentoScalarFieldEnum | OrcamentoScalarFieldEnum[]
  }

  /**
   * Orcamento findFirstOrThrow
   */
  export type OrcamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which Orcamento to fetch.
     */
    where?: OrcamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orcamentos to fetch.
     */
    orderBy?: OrcamentoOrderByWithRelationInput | OrcamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orcamentos.
     */
    cursor?: OrcamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orcamentos.
     */
    distinct?: OrcamentoScalarFieldEnum | OrcamentoScalarFieldEnum[]
  }

  /**
   * Orcamento findMany
   */
  export type OrcamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which Orcamentos to fetch.
     */
    where?: OrcamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orcamentos to fetch.
     */
    orderBy?: OrcamentoOrderByWithRelationInput | OrcamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orcamentos.
     */
    cursor?: OrcamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orcamentos.
     */
    skip?: number
    distinct?: OrcamentoScalarFieldEnum | OrcamentoScalarFieldEnum[]
  }

  /**
   * Orcamento create
   */
  export type OrcamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Orcamento.
     */
    data: XOR<OrcamentoCreateInput, OrcamentoUncheckedCreateInput>
  }

  /**
   * Orcamento createMany
   */
  export type OrcamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orcamentos.
     */
    data: OrcamentoCreateManyInput | OrcamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Orcamento update
   */
  export type OrcamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Orcamento.
     */
    data: XOR<OrcamentoUpdateInput, OrcamentoUncheckedUpdateInput>
    /**
     * Choose, which Orcamento to update.
     */
    where: OrcamentoWhereUniqueInput
  }

  /**
   * Orcamento updateMany
   */
  export type OrcamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orcamentos.
     */
    data: XOR<OrcamentoUpdateManyMutationInput, OrcamentoUncheckedUpdateManyInput>
    /**
     * Filter which Orcamentos to update
     */
    where?: OrcamentoWhereInput
  }

  /**
   * Orcamento upsert
   */
  export type OrcamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Orcamento to update in case it exists.
     */
    where: OrcamentoWhereUniqueInput
    /**
     * In case the Orcamento found by the `where` argument doesn't exist, create a new Orcamento with this data.
     */
    create: XOR<OrcamentoCreateInput, OrcamentoUncheckedCreateInput>
    /**
     * In case the Orcamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrcamentoUpdateInput, OrcamentoUncheckedUpdateInput>
  }

  /**
   * Orcamento delete
   */
  export type OrcamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
    /**
     * Filter which Orcamento to delete.
     */
    where: OrcamentoWhereUniqueInput
  }

  /**
   * Orcamento deleteMany
   */
  export type OrcamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orcamentos to delete
     */
    where?: OrcamentoWhereInput
  }

  /**
   * Orcamento.historicoOrcamentos
   */
  export type Orcamento$historicoOrcamentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    where?: HistoricoOrcamentoWhereInput
    orderBy?: HistoricoOrcamentoOrderByWithRelationInput | HistoricoOrcamentoOrderByWithRelationInput[]
    cursor?: HistoricoOrcamentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoricoOrcamentoScalarFieldEnum | HistoricoOrcamentoScalarFieldEnum[]
  }

  /**
   * Orcamento without action
   */
  export type OrcamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orcamento
     */
    select?: OrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrcamentoInclude<ExtArgs> | null
  }


  /**
   * Model HistoricoOrcamento
   */

  export type AggregateHistoricoOrcamento = {
    _count: HistoricoOrcamentoCountAggregateOutputType | null
    _avg: HistoricoOrcamentoAvgAggregateOutputType | null
    _sum: HistoricoOrcamentoSumAggregateOutputType | null
    _min: HistoricoOrcamentoMinAggregateOutputType | null
    _max: HistoricoOrcamentoMaxAggregateOutputType | null
  }

  export type HistoricoOrcamentoAvgAggregateOutputType = {
    id: number | null
    orcamentoId: number | null
    valor: number | null
  }

  export type HistoricoOrcamentoSumAggregateOutputType = {
    id: number | null
    orcamentoId: number | null
    valor: number | null
  }

  export type HistoricoOrcamentoMinAggregateOutputType = {
    id: number | null
    orcamentoId: number | null
    data: Date | null
    valor: number | null
    status: $Enums.StatusEnum | null
    tipoAjuste: $Enums.TipoAjusteEnum | null
  }

  export type HistoricoOrcamentoMaxAggregateOutputType = {
    id: number | null
    orcamentoId: number | null
    data: Date | null
    valor: number | null
    status: $Enums.StatusEnum | null
    tipoAjuste: $Enums.TipoAjusteEnum | null
  }

  export type HistoricoOrcamentoCountAggregateOutputType = {
    id: number
    orcamentoId: number
    data: number
    valor: number
    status: number
    tipoAjuste: number
    _all: number
  }


  export type HistoricoOrcamentoAvgAggregateInputType = {
    id?: true
    orcamentoId?: true
    valor?: true
  }

  export type HistoricoOrcamentoSumAggregateInputType = {
    id?: true
    orcamentoId?: true
    valor?: true
  }

  export type HistoricoOrcamentoMinAggregateInputType = {
    id?: true
    orcamentoId?: true
    data?: true
    valor?: true
    status?: true
    tipoAjuste?: true
  }

  export type HistoricoOrcamentoMaxAggregateInputType = {
    id?: true
    orcamentoId?: true
    data?: true
    valor?: true
    status?: true
    tipoAjuste?: true
  }

  export type HistoricoOrcamentoCountAggregateInputType = {
    id?: true
    orcamentoId?: true
    data?: true
    valor?: true
    status?: true
    tipoAjuste?: true
    _all?: true
  }

  export type HistoricoOrcamentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoricoOrcamento to aggregate.
     */
    where?: HistoricoOrcamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoOrcamentos to fetch.
     */
    orderBy?: HistoricoOrcamentoOrderByWithRelationInput | HistoricoOrcamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoricoOrcamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoOrcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoOrcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HistoricoOrcamentos
    **/
    _count?: true | HistoricoOrcamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoricoOrcamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistoricoOrcamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoricoOrcamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoricoOrcamentoMaxAggregateInputType
  }

  export type GetHistoricoOrcamentoAggregateType<T extends HistoricoOrcamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateHistoricoOrcamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistoricoOrcamento[P]>
      : GetScalarType<T[P], AggregateHistoricoOrcamento[P]>
  }




  export type HistoricoOrcamentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricoOrcamentoWhereInput
    orderBy?: HistoricoOrcamentoOrderByWithAggregationInput | HistoricoOrcamentoOrderByWithAggregationInput[]
    by: HistoricoOrcamentoScalarFieldEnum[] | HistoricoOrcamentoScalarFieldEnum
    having?: HistoricoOrcamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoricoOrcamentoCountAggregateInputType | true
    _avg?: HistoricoOrcamentoAvgAggregateInputType
    _sum?: HistoricoOrcamentoSumAggregateInputType
    _min?: HistoricoOrcamentoMinAggregateInputType
    _max?: HistoricoOrcamentoMaxAggregateInputType
  }

  export type HistoricoOrcamentoGroupByOutputType = {
    id: number
    orcamentoId: number
    data: Date
    valor: number
    status: $Enums.StatusEnum
    tipoAjuste: $Enums.TipoAjusteEnum
    _count: HistoricoOrcamentoCountAggregateOutputType | null
    _avg: HistoricoOrcamentoAvgAggregateOutputType | null
    _sum: HistoricoOrcamentoSumAggregateOutputType | null
    _min: HistoricoOrcamentoMinAggregateOutputType | null
    _max: HistoricoOrcamentoMaxAggregateOutputType | null
  }

  type GetHistoricoOrcamentoGroupByPayload<T extends HistoricoOrcamentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoricoOrcamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoricoOrcamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoricoOrcamentoGroupByOutputType[P]>
            : GetScalarType<T[P], HistoricoOrcamentoGroupByOutputType[P]>
        }
      >
    >


  export type HistoricoOrcamentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orcamentoId?: boolean
    data?: boolean
    valor?: boolean
    status?: boolean
    tipoAjuste?: boolean
    orcamento?: boolean | OrcamentoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historicoOrcamento"]>


  export type HistoricoOrcamentoSelectScalar = {
    id?: boolean
    orcamentoId?: boolean
    data?: boolean
    valor?: boolean
    status?: boolean
    tipoAjuste?: boolean
  }

  export type HistoricoOrcamentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orcamento?: boolean | OrcamentoDefaultArgs<ExtArgs>
  }

  export type $HistoricoOrcamentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HistoricoOrcamento"
    objects: {
      orcamento: Prisma.$OrcamentoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orcamentoId: number
      data: Date
      valor: number
      status: $Enums.StatusEnum
      tipoAjuste: $Enums.TipoAjusteEnum
    }, ExtArgs["result"]["historicoOrcamento"]>
    composites: {}
  }

  type HistoricoOrcamentoGetPayload<S extends boolean | null | undefined | HistoricoOrcamentoDefaultArgs> = $Result.GetResult<Prisma.$HistoricoOrcamentoPayload, S>

  type HistoricoOrcamentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HistoricoOrcamentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HistoricoOrcamentoCountAggregateInputType | true
    }

  export interface HistoricoOrcamentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HistoricoOrcamento'], meta: { name: 'HistoricoOrcamento' } }
    /**
     * Find zero or one HistoricoOrcamento that matches the filter.
     * @param {HistoricoOrcamentoFindUniqueArgs} args - Arguments to find a HistoricoOrcamento
     * @example
     * // Get one HistoricoOrcamento
     * const historicoOrcamento = await prisma.historicoOrcamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistoricoOrcamentoFindUniqueArgs>(args: SelectSubset<T, HistoricoOrcamentoFindUniqueArgs<ExtArgs>>): Prisma__HistoricoOrcamentoClient<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HistoricoOrcamento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HistoricoOrcamentoFindUniqueOrThrowArgs} args - Arguments to find a HistoricoOrcamento
     * @example
     * // Get one HistoricoOrcamento
     * const historicoOrcamento = await prisma.historicoOrcamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistoricoOrcamentoFindUniqueOrThrowArgs>(args: SelectSubset<T, HistoricoOrcamentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistoricoOrcamentoClient<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HistoricoOrcamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoOrcamentoFindFirstArgs} args - Arguments to find a HistoricoOrcamento
     * @example
     * // Get one HistoricoOrcamento
     * const historicoOrcamento = await prisma.historicoOrcamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistoricoOrcamentoFindFirstArgs>(args?: SelectSubset<T, HistoricoOrcamentoFindFirstArgs<ExtArgs>>): Prisma__HistoricoOrcamentoClient<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HistoricoOrcamento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoOrcamentoFindFirstOrThrowArgs} args - Arguments to find a HistoricoOrcamento
     * @example
     * // Get one HistoricoOrcamento
     * const historicoOrcamento = await prisma.historicoOrcamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistoricoOrcamentoFindFirstOrThrowArgs>(args?: SelectSubset<T, HistoricoOrcamentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistoricoOrcamentoClient<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HistoricoOrcamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoOrcamentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HistoricoOrcamentos
     * const historicoOrcamentos = await prisma.historicoOrcamento.findMany()
     * 
     * // Get first 10 HistoricoOrcamentos
     * const historicoOrcamentos = await prisma.historicoOrcamento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historicoOrcamentoWithIdOnly = await prisma.historicoOrcamento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistoricoOrcamentoFindManyArgs>(args?: SelectSubset<T, HistoricoOrcamentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HistoricoOrcamento.
     * @param {HistoricoOrcamentoCreateArgs} args - Arguments to create a HistoricoOrcamento.
     * @example
     * // Create one HistoricoOrcamento
     * const HistoricoOrcamento = await prisma.historicoOrcamento.create({
     *   data: {
     *     // ... data to create a HistoricoOrcamento
     *   }
     * })
     * 
     */
    create<T extends HistoricoOrcamentoCreateArgs>(args: SelectSubset<T, HistoricoOrcamentoCreateArgs<ExtArgs>>): Prisma__HistoricoOrcamentoClient<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HistoricoOrcamentos.
     * @param {HistoricoOrcamentoCreateManyArgs} args - Arguments to create many HistoricoOrcamentos.
     * @example
     * // Create many HistoricoOrcamentos
     * const historicoOrcamento = await prisma.historicoOrcamento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistoricoOrcamentoCreateManyArgs>(args?: SelectSubset<T, HistoricoOrcamentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a HistoricoOrcamento.
     * @param {HistoricoOrcamentoDeleteArgs} args - Arguments to delete one HistoricoOrcamento.
     * @example
     * // Delete one HistoricoOrcamento
     * const HistoricoOrcamento = await prisma.historicoOrcamento.delete({
     *   where: {
     *     // ... filter to delete one HistoricoOrcamento
     *   }
     * })
     * 
     */
    delete<T extends HistoricoOrcamentoDeleteArgs>(args: SelectSubset<T, HistoricoOrcamentoDeleteArgs<ExtArgs>>): Prisma__HistoricoOrcamentoClient<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HistoricoOrcamento.
     * @param {HistoricoOrcamentoUpdateArgs} args - Arguments to update one HistoricoOrcamento.
     * @example
     * // Update one HistoricoOrcamento
     * const historicoOrcamento = await prisma.historicoOrcamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistoricoOrcamentoUpdateArgs>(args: SelectSubset<T, HistoricoOrcamentoUpdateArgs<ExtArgs>>): Prisma__HistoricoOrcamentoClient<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HistoricoOrcamentos.
     * @param {HistoricoOrcamentoDeleteManyArgs} args - Arguments to filter HistoricoOrcamentos to delete.
     * @example
     * // Delete a few HistoricoOrcamentos
     * const { count } = await prisma.historicoOrcamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistoricoOrcamentoDeleteManyArgs>(args?: SelectSubset<T, HistoricoOrcamentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistoricoOrcamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoOrcamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HistoricoOrcamentos
     * const historicoOrcamento = await prisma.historicoOrcamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistoricoOrcamentoUpdateManyArgs>(args: SelectSubset<T, HistoricoOrcamentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HistoricoOrcamento.
     * @param {HistoricoOrcamentoUpsertArgs} args - Arguments to update or create a HistoricoOrcamento.
     * @example
     * // Update or create a HistoricoOrcamento
     * const historicoOrcamento = await prisma.historicoOrcamento.upsert({
     *   create: {
     *     // ... data to create a HistoricoOrcamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HistoricoOrcamento we want to update
     *   }
     * })
     */
    upsert<T extends HistoricoOrcamentoUpsertArgs>(args: SelectSubset<T, HistoricoOrcamentoUpsertArgs<ExtArgs>>): Prisma__HistoricoOrcamentoClient<$Result.GetResult<Prisma.$HistoricoOrcamentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HistoricoOrcamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoOrcamentoCountArgs} args - Arguments to filter HistoricoOrcamentos to count.
     * @example
     * // Count the number of HistoricoOrcamentos
     * const count = await prisma.historicoOrcamento.count({
     *   where: {
     *     // ... the filter for the HistoricoOrcamentos we want to count
     *   }
     * })
    **/
    count<T extends HistoricoOrcamentoCountArgs>(
      args?: Subset<T, HistoricoOrcamentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoricoOrcamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HistoricoOrcamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoOrcamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoricoOrcamentoAggregateArgs>(args: Subset<T, HistoricoOrcamentoAggregateArgs>): Prisma.PrismaPromise<GetHistoricoOrcamentoAggregateType<T>>

    /**
     * Group by HistoricoOrcamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricoOrcamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoricoOrcamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoricoOrcamentoGroupByArgs['orderBy'] }
        : { orderBy?: HistoricoOrcamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoricoOrcamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoricoOrcamentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HistoricoOrcamento model
   */
  readonly fields: HistoricoOrcamentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HistoricoOrcamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoricoOrcamentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orcamento<T extends OrcamentoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrcamentoDefaultArgs<ExtArgs>>): Prisma__OrcamentoClient<$Result.GetResult<Prisma.$OrcamentoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HistoricoOrcamento model
   */ 
  interface HistoricoOrcamentoFieldRefs {
    readonly id: FieldRef<"HistoricoOrcamento", 'Int'>
    readonly orcamentoId: FieldRef<"HistoricoOrcamento", 'Int'>
    readonly data: FieldRef<"HistoricoOrcamento", 'DateTime'>
    readonly valor: FieldRef<"HistoricoOrcamento", 'Float'>
    readonly status: FieldRef<"HistoricoOrcamento", 'StatusEnum'>
    readonly tipoAjuste: FieldRef<"HistoricoOrcamento", 'TipoAjusteEnum'>
  }
    

  // Custom InputTypes
  /**
   * HistoricoOrcamento findUnique
   */
  export type HistoricoOrcamentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoOrcamento to fetch.
     */
    where: HistoricoOrcamentoWhereUniqueInput
  }

  /**
   * HistoricoOrcamento findUniqueOrThrow
   */
  export type HistoricoOrcamentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoOrcamento to fetch.
     */
    where: HistoricoOrcamentoWhereUniqueInput
  }

  /**
   * HistoricoOrcamento findFirst
   */
  export type HistoricoOrcamentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoOrcamento to fetch.
     */
    where?: HistoricoOrcamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoOrcamentos to fetch.
     */
    orderBy?: HistoricoOrcamentoOrderByWithRelationInput | HistoricoOrcamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoricoOrcamentos.
     */
    cursor?: HistoricoOrcamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoOrcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoOrcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoricoOrcamentos.
     */
    distinct?: HistoricoOrcamentoScalarFieldEnum | HistoricoOrcamentoScalarFieldEnum[]
  }

  /**
   * HistoricoOrcamento findFirstOrThrow
   */
  export type HistoricoOrcamentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoOrcamento to fetch.
     */
    where?: HistoricoOrcamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoOrcamentos to fetch.
     */
    orderBy?: HistoricoOrcamentoOrderByWithRelationInput | HistoricoOrcamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoricoOrcamentos.
     */
    cursor?: HistoricoOrcamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoOrcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoOrcamentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoricoOrcamentos.
     */
    distinct?: HistoricoOrcamentoScalarFieldEnum | HistoricoOrcamentoScalarFieldEnum[]
  }

  /**
   * HistoricoOrcamento findMany
   */
  export type HistoricoOrcamentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * Filter, which HistoricoOrcamentos to fetch.
     */
    where?: HistoricoOrcamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricoOrcamentos to fetch.
     */
    orderBy?: HistoricoOrcamentoOrderByWithRelationInput | HistoricoOrcamentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HistoricoOrcamentos.
     */
    cursor?: HistoricoOrcamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricoOrcamentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricoOrcamentos.
     */
    skip?: number
    distinct?: HistoricoOrcamentoScalarFieldEnum | HistoricoOrcamentoScalarFieldEnum[]
  }

  /**
   * HistoricoOrcamento create
   */
  export type HistoricoOrcamentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * The data needed to create a HistoricoOrcamento.
     */
    data: XOR<HistoricoOrcamentoCreateInput, HistoricoOrcamentoUncheckedCreateInput>
  }

  /**
   * HistoricoOrcamento createMany
   */
  export type HistoricoOrcamentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HistoricoOrcamentos.
     */
    data: HistoricoOrcamentoCreateManyInput | HistoricoOrcamentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HistoricoOrcamento update
   */
  export type HistoricoOrcamentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * The data needed to update a HistoricoOrcamento.
     */
    data: XOR<HistoricoOrcamentoUpdateInput, HistoricoOrcamentoUncheckedUpdateInput>
    /**
     * Choose, which HistoricoOrcamento to update.
     */
    where: HistoricoOrcamentoWhereUniqueInput
  }

  /**
   * HistoricoOrcamento updateMany
   */
  export type HistoricoOrcamentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HistoricoOrcamentos.
     */
    data: XOR<HistoricoOrcamentoUpdateManyMutationInput, HistoricoOrcamentoUncheckedUpdateManyInput>
    /**
     * Filter which HistoricoOrcamentos to update
     */
    where?: HistoricoOrcamentoWhereInput
  }

  /**
   * HistoricoOrcamento upsert
   */
  export type HistoricoOrcamentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * The filter to search for the HistoricoOrcamento to update in case it exists.
     */
    where: HistoricoOrcamentoWhereUniqueInput
    /**
     * In case the HistoricoOrcamento found by the `where` argument doesn't exist, create a new HistoricoOrcamento with this data.
     */
    create: XOR<HistoricoOrcamentoCreateInput, HistoricoOrcamentoUncheckedCreateInput>
    /**
     * In case the HistoricoOrcamento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoricoOrcamentoUpdateInput, HistoricoOrcamentoUncheckedUpdateInput>
  }

  /**
   * HistoricoOrcamento delete
   */
  export type HistoricoOrcamentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
    /**
     * Filter which HistoricoOrcamento to delete.
     */
    where: HistoricoOrcamentoWhereUniqueInput
  }

  /**
   * HistoricoOrcamento deleteMany
   */
  export type HistoricoOrcamentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoricoOrcamentos to delete
     */
    where?: HistoricoOrcamentoWhereInput
  }

  /**
   * HistoricoOrcamento without action
   */
  export type HistoricoOrcamentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricoOrcamento
     */
    select?: HistoricoOrcamentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricoOrcamentoInclude<ExtArgs> | null
  }


  /**
   * Model Relatorio
   */

  export type AggregateRelatorio = {
    _count: RelatorioCountAggregateOutputType | null
    _avg: RelatorioAvgAggregateOutputType | null
    _sum: RelatorioSumAggregateOutputType | null
    _min: RelatorioMinAggregateOutputType | null
    _max: RelatorioMaxAggregateOutputType | null
  }

  export type RelatorioAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type RelatorioSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type RelatorioMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    tipo: $Enums.TipoRelatorioEnum | null
    dataInicio: Date | null
    dataFim: Date | null
    relatorio: string | null
    formato: string | null
  }

  export type RelatorioMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    tipo: $Enums.TipoRelatorioEnum | null
    dataInicio: Date | null
    dataFim: Date | null
    relatorio: string | null
    formato: string | null
  }

  export type RelatorioCountAggregateOutputType = {
    id: number
    usuarioId: number
    tipo: number
    dataInicio: number
    dataFim: number
    relatorio: number
    formato: number
    _all: number
  }


  export type RelatorioAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type RelatorioSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type RelatorioMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    dataInicio?: true
    dataFim?: true
    relatorio?: true
    formato?: true
  }

  export type RelatorioMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    dataInicio?: true
    dataFim?: true
    relatorio?: true
    formato?: true
  }

  export type RelatorioCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    dataInicio?: true
    dataFim?: true
    relatorio?: true
    formato?: true
    _all?: true
  }

  export type RelatorioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relatorio to aggregate.
     */
    where?: RelatorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relatorios to fetch.
     */
    orderBy?: RelatorioOrderByWithRelationInput | RelatorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelatorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relatorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relatorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Relatorios
    **/
    _count?: true | RelatorioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelatorioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelatorioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelatorioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelatorioMaxAggregateInputType
  }

  export type GetRelatorioAggregateType<T extends RelatorioAggregateArgs> = {
        [P in keyof T & keyof AggregateRelatorio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelatorio[P]>
      : GetScalarType<T[P], AggregateRelatorio[P]>
  }




  export type RelatorioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatorioWhereInput
    orderBy?: RelatorioOrderByWithAggregationInput | RelatorioOrderByWithAggregationInput[]
    by: RelatorioScalarFieldEnum[] | RelatorioScalarFieldEnum
    having?: RelatorioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelatorioCountAggregateInputType | true
    _avg?: RelatorioAvgAggregateInputType
    _sum?: RelatorioSumAggregateInputType
    _min?: RelatorioMinAggregateInputType
    _max?: RelatorioMaxAggregateInputType
  }

  export type RelatorioGroupByOutputType = {
    id: number
    usuarioId: number
    tipo: $Enums.TipoRelatorioEnum
    dataInicio: Date
    dataFim: Date
    relatorio: string
    formato: string | null
    _count: RelatorioCountAggregateOutputType | null
    _avg: RelatorioAvgAggregateOutputType | null
    _sum: RelatorioSumAggregateOutputType | null
    _min: RelatorioMinAggregateOutputType | null
    _max: RelatorioMaxAggregateOutputType | null
  }

  type GetRelatorioGroupByPayload<T extends RelatorioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelatorioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelatorioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelatorioGroupByOutputType[P]>
            : GetScalarType<T[P], RelatorioGroupByOutputType[P]>
        }
      >
    >


  export type RelatorioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    relatorio?: boolean
    formato?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatorio"]>


  export type RelatorioSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    relatorio?: boolean
    formato?: boolean
  }

  export type RelatorioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $RelatorioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Relatorio"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      tipo: $Enums.TipoRelatorioEnum
      dataInicio: Date
      dataFim: Date
      relatorio: string
      formato: string | null
    }, ExtArgs["result"]["relatorio"]>
    composites: {}
  }

  type RelatorioGetPayload<S extends boolean | null | undefined | RelatorioDefaultArgs> = $Result.GetResult<Prisma.$RelatorioPayload, S>

  type RelatorioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RelatorioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RelatorioCountAggregateInputType | true
    }

  export interface RelatorioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Relatorio'], meta: { name: 'Relatorio' } }
    /**
     * Find zero or one Relatorio that matches the filter.
     * @param {RelatorioFindUniqueArgs} args - Arguments to find a Relatorio
     * @example
     * // Get one Relatorio
     * const relatorio = await prisma.relatorio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelatorioFindUniqueArgs>(args: SelectSubset<T, RelatorioFindUniqueArgs<ExtArgs>>): Prisma__RelatorioClient<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Relatorio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RelatorioFindUniqueOrThrowArgs} args - Arguments to find a Relatorio
     * @example
     * // Get one Relatorio
     * const relatorio = await prisma.relatorio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelatorioFindUniqueOrThrowArgs>(args: SelectSubset<T, RelatorioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelatorioClient<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Relatorio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioFindFirstArgs} args - Arguments to find a Relatorio
     * @example
     * // Get one Relatorio
     * const relatorio = await prisma.relatorio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelatorioFindFirstArgs>(args?: SelectSubset<T, RelatorioFindFirstArgs<ExtArgs>>): Prisma__RelatorioClient<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Relatorio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioFindFirstOrThrowArgs} args - Arguments to find a Relatorio
     * @example
     * // Get one Relatorio
     * const relatorio = await prisma.relatorio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelatorioFindFirstOrThrowArgs>(args?: SelectSubset<T, RelatorioFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelatorioClient<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Relatorios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Relatorios
     * const relatorios = await prisma.relatorio.findMany()
     * 
     * // Get first 10 Relatorios
     * const relatorios = await prisma.relatorio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relatorioWithIdOnly = await prisma.relatorio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelatorioFindManyArgs>(args?: SelectSubset<T, RelatorioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Relatorio.
     * @param {RelatorioCreateArgs} args - Arguments to create a Relatorio.
     * @example
     * // Create one Relatorio
     * const Relatorio = await prisma.relatorio.create({
     *   data: {
     *     // ... data to create a Relatorio
     *   }
     * })
     * 
     */
    create<T extends RelatorioCreateArgs>(args: SelectSubset<T, RelatorioCreateArgs<ExtArgs>>): Prisma__RelatorioClient<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Relatorios.
     * @param {RelatorioCreateManyArgs} args - Arguments to create many Relatorios.
     * @example
     * // Create many Relatorios
     * const relatorio = await prisma.relatorio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelatorioCreateManyArgs>(args?: SelectSubset<T, RelatorioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Relatorio.
     * @param {RelatorioDeleteArgs} args - Arguments to delete one Relatorio.
     * @example
     * // Delete one Relatorio
     * const Relatorio = await prisma.relatorio.delete({
     *   where: {
     *     // ... filter to delete one Relatorio
     *   }
     * })
     * 
     */
    delete<T extends RelatorioDeleteArgs>(args: SelectSubset<T, RelatorioDeleteArgs<ExtArgs>>): Prisma__RelatorioClient<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Relatorio.
     * @param {RelatorioUpdateArgs} args - Arguments to update one Relatorio.
     * @example
     * // Update one Relatorio
     * const relatorio = await prisma.relatorio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelatorioUpdateArgs>(args: SelectSubset<T, RelatorioUpdateArgs<ExtArgs>>): Prisma__RelatorioClient<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Relatorios.
     * @param {RelatorioDeleteManyArgs} args - Arguments to filter Relatorios to delete.
     * @example
     * // Delete a few Relatorios
     * const { count } = await prisma.relatorio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelatorioDeleteManyArgs>(args?: SelectSubset<T, RelatorioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Relatorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Relatorios
     * const relatorio = await prisma.relatorio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelatorioUpdateManyArgs>(args: SelectSubset<T, RelatorioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Relatorio.
     * @param {RelatorioUpsertArgs} args - Arguments to update or create a Relatorio.
     * @example
     * // Update or create a Relatorio
     * const relatorio = await prisma.relatorio.upsert({
     *   create: {
     *     // ... data to create a Relatorio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Relatorio we want to update
     *   }
     * })
     */
    upsert<T extends RelatorioUpsertArgs>(args: SelectSubset<T, RelatorioUpsertArgs<ExtArgs>>): Prisma__RelatorioClient<$Result.GetResult<Prisma.$RelatorioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Relatorios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioCountArgs} args - Arguments to filter Relatorios to count.
     * @example
     * // Count the number of Relatorios
     * const count = await prisma.relatorio.count({
     *   where: {
     *     // ... the filter for the Relatorios we want to count
     *   }
     * })
    **/
    count<T extends RelatorioCountArgs>(
      args?: Subset<T, RelatorioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelatorioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Relatorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelatorioAggregateArgs>(args: Subset<T, RelatorioAggregateArgs>): Prisma.PrismaPromise<GetRelatorioAggregateType<T>>

    /**
     * Group by Relatorio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelatorioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelatorioGroupByArgs['orderBy'] }
        : { orderBy?: RelatorioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelatorioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelatorioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Relatorio model
   */
  readonly fields: RelatorioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Relatorio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelatorioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Relatorio model
   */ 
  interface RelatorioFieldRefs {
    readonly id: FieldRef<"Relatorio", 'Int'>
    readonly usuarioId: FieldRef<"Relatorio", 'Int'>
    readonly tipo: FieldRef<"Relatorio", 'TipoRelatorioEnum'>
    readonly dataInicio: FieldRef<"Relatorio", 'DateTime'>
    readonly dataFim: FieldRef<"Relatorio", 'DateTime'>
    readonly relatorio: FieldRef<"Relatorio", 'String'>
    readonly formato: FieldRef<"Relatorio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Relatorio findUnique
   */
  export type RelatorioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * Filter, which Relatorio to fetch.
     */
    where: RelatorioWhereUniqueInput
  }

  /**
   * Relatorio findUniqueOrThrow
   */
  export type RelatorioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * Filter, which Relatorio to fetch.
     */
    where: RelatorioWhereUniqueInput
  }

  /**
   * Relatorio findFirst
   */
  export type RelatorioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * Filter, which Relatorio to fetch.
     */
    where?: RelatorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relatorios to fetch.
     */
    orderBy?: RelatorioOrderByWithRelationInput | RelatorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relatorios.
     */
    cursor?: RelatorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relatorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relatorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relatorios.
     */
    distinct?: RelatorioScalarFieldEnum | RelatorioScalarFieldEnum[]
  }

  /**
   * Relatorio findFirstOrThrow
   */
  export type RelatorioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * Filter, which Relatorio to fetch.
     */
    where?: RelatorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relatorios to fetch.
     */
    orderBy?: RelatorioOrderByWithRelationInput | RelatorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Relatorios.
     */
    cursor?: RelatorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relatorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relatorios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Relatorios.
     */
    distinct?: RelatorioScalarFieldEnum | RelatorioScalarFieldEnum[]
  }

  /**
   * Relatorio findMany
   */
  export type RelatorioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * Filter, which Relatorios to fetch.
     */
    where?: RelatorioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Relatorios to fetch.
     */
    orderBy?: RelatorioOrderByWithRelationInput | RelatorioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Relatorios.
     */
    cursor?: RelatorioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Relatorios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Relatorios.
     */
    skip?: number
    distinct?: RelatorioScalarFieldEnum | RelatorioScalarFieldEnum[]
  }

  /**
   * Relatorio create
   */
  export type RelatorioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * The data needed to create a Relatorio.
     */
    data: XOR<RelatorioCreateInput, RelatorioUncheckedCreateInput>
  }

  /**
   * Relatorio createMany
   */
  export type RelatorioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Relatorios.
     */
    data: RelatorioCreateManyInput | RelatorioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Relatorio update
   */
  export type RelatorioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * The data needed to update a Relatorio.
     */
    data: XOR<RelatorioUpdateInput, RelatorioUncheckedUpdateInput>
    /**
     * Choose, which Relatorio to update.
     */
    where: RelatorioWhereUniqueInput
  }

  /**
   * Relatorio updateMany
   */
  export type RelatorioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Relatorios.
     */
    data: XOR<RelatorioUpdateManyMutationInput, RelatorioUncheckedUpdateManyInput>
    /**
     * Filter which Relatorios to update
     */
    where?: RelatorioWhereInput
  }

  /**
   * Relatorio upsert
   */
  export type RelatorioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * The filter to search for the Relatorio to update in case it exists.
     */
    where: RelatorioWhereUniqueInput
    /**
     * In case the Relatorio found by the `where` argument doesn't exist, create a new Relatorio with this data.
     */
    create: XOR<RelatorioCreateInput, RelatorioUncheckedCreateInput>
    /**
     * In case the Relatorio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelatorioUpdateInput, RelatorioUncheckedUpdateInput>
  }

  /**
   * Relatorio delete
   */
  export type RelatorioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
    /**
     * Filter which Relatorio to delete.
     */
    where: RelatorioWhereUniqueInput
  }

  /**
   * Relatorio deleteMany
   */
  export type RelatorioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Relatorios to delete
     */
    where?: RelatorioWhereInput
  }

  /**
   * Relatorio without action
   */
  export type RelatorioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Relatorio
     */
    select?: RelatorioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioInclude<ExtArgs> | null
  }


  /**
   * Model RelatorioJson
   */

  export type AggregateRelatorioJson = {
    _count: RelatorioJsonCountAggregateOutputType | null
    _avg: RelatorioJsonAvgAggregateOutputType | null
    _sum: RelatorioJsonSumAggregateOutputType | null
    _min: RelatorioJsonMinAggregateOutputType | null
    _max: RelatorioJsonMaxAggregateOutputType | null
  }

  export type RelatorioJsonAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type RelatorioJsonSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type RelatorioJsonMinAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    tipo: $Enums.TipoRelatorioJsonEnum | null
    dataInicio: Date | null
    dataFim: Date | null
  }

  export type RelatorioJsonMaxAggregateOutputType = {
    id: number | null
    usuarioId: number | null
    tipo: $Enums.TipoRelatorioJsonEnum | null
    dataInicio: Date | null
    dataFim: Date | null
  }

  export type RelatorioJsonCountAggregateOutputType = {
    id: number
    usuarioId: number
    tipo: number
    dataInicio: number
    dataFim: number
    dados: number
    _all: number
  }


  export type RelatorioJsonAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type RelatorioJsonSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type RelatorioJsonMinAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    dataInicio?: true
    dataFim?: true
  }

  export type RelatorioJsonMaxAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    dataInicio?: true
    dataFim?: true
  }

  export type RelatorioJsonCountAggregateInputType = {
    id?: true
    usuarioId?: true
    tipo?: true
    dataInicio?: true
    dataFim?: true
    dados?: true
    _all?: true
  }

  export type RelatorioJsonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelatorioJson to aggregate.
     */
    where?: RelatorioJsonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatorioJsons to fetch.
     */
    orderBy?: RelatorioJsonOrderByWithRelationInput | RelatorioJsonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelatorioJsonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatorioJsons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatorioJsons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RelatorioJsons
    **/
    _count?: true | RelatorioJsonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelatorioJsonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelatorioJsonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelatorioJsonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelatorioJsonMaxAggregateInputType
  }

  export type GetRelatorioJsonAggregateType<T extends RelatorioJsonAggregateArgs> = {
        [P in keyof T & keyof AggregateRelatorioJson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelatorioJson[P]>
      : GetScalarType<T[P], AggregateRelatorioJson[P]>
  }




  export type RelatorioJsonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatorioJsonWhereInput
    orderBy?: RelatorioJsonOrderByWithAggregationInput | RelatorioJsonOrderByWithAggregationInput[]
    by: RelatorioJsonScalarFieldEnum[] | RelatorioJsonScalarFieldEnum
    having?: RelatorioJsonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelatorioJsonCountAggregateInputType | true
    _avg?: RelatorioJsonAvgAggregateInputType
    _sum?: RelatorioJsonSumAggregateInputType
    _min?: RelatorioJsonMinAggregateInputType
    _max?: RelatorioJsonMaxAggregateInputType
  }

  export type RelatorioJsonGroupByOutputType = {
    id: number
    usuarioId: number
    tipo: $Enums.TipoRelatorioJsonEnum
    dataInicio: Date
    dataFim: Date
    dados: JsonValue
    _count: RelatorioJsonCountAggregateOutputType | null
    _avg: RelatorioJsonAvgAggregateOutputType | null
    _sum: RelatorioJsonSumAggregateOutputType | null
    _min: RelatorioJsonMinAggregateOutputType | null
    _max: RelatorioJsonMaxAggregateOutputType | null
  }

  type GetRelatorioJsonGroupByPayload<T extends RelatorioJsonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelatorioJsonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelatorioJsonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelatorioJsonGroupByOutputType[P]>
            : GetScalarType<T[P], RelatorioJsonGroupByOutputType[P]>
        }
      >
    >


  export type RelatorioJsonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    dados?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatorioJson"]>


  export type RelatorioJsonSelectScalar = {
    id?: boolean
    usuarioId?: boolean
    tipo?: boolean
    dataInicio?: boolean
    dataFim?: boolean
    dados?: boolean
  }

  export type RelatorioJsonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $RelatorioJsonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RelatorioJson"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioId: number
      tipo: $Enums.TipoRelatorioJsonEnum
      dataInicio: Date
      dataFim: Date
      dados: Prisma.JsonValue
    }, ExtArgs["result"]["relatorioJson"]>
    composites: {}
  }

  type RelatorioJsonGetPayload<S extends boolean | null | undefined | RelatorioJsonDefaultArgs> = $Result.GetResult<Prisma.$RelatorioJsonPayload, S>

  type RelatorioJsonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RelatorioJsonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RelatorioJsonCountAggregateInputType | true
    }

  export interface RelatorioJsonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RelatorioJson'], meta: { name: 'RelatorioJson' } }
    /**
     * Find zero or one RelatorioJson that matches the filter.
     * @param {RelatorioJsonFindUniqueArgs} args - Arguments to find a RelatorioJson
     * @example
     * // Get one RelatorioJson
     * const relatorioJson = await prisma.relatorioJson.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelatorioJsonFindUniqueArgs>(args: SelectSubset<T, RelatorioJsonFindUniqueArgs<ExtArgs>>): Prisma__RelatorioJsonClient<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RelatorioJson that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RelatorioJsonFindUniqueOrThrowArgs} args - Arguments to find a RelatorioJson
     * @example
     * // Get one RelatorioJson
     * const relatorioJson = await prisma.relatorioJson.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelatorioJsonFindUniqueOrThrowArgs>(args: SelectSubset<T, RelatorioJsonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelatorioJsonClient<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RelatorioJson that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioJsonFindFirstArgs} args - Arguments to find a RelatorioJson
     * @example
     * // Get one RelatorioJson
     * const relatorioJson = await prisma.relatorioJson.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelatorioJsonFindFirstArgs>(args?: SelectSubset<T, RelatorioJsonFindFirstArgs<ExtArgs>>): Prisma__RelatorioJsonClient<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RelatorioJson that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioJsonFindFirstOrThrowArgs} args - Arguments to find a RelatorioJson
     * @example
     * // Get one RelatorioJson
     * const relatorioJson = await prisma.relatorioJson.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelatorioJsonFindFirstOrThrowArgs>(args?: SelectSubset<T, RelatorioJsonFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelatorioJsonClient<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RelatorioJsons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioJsonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RelatorioJsons
     * const relatorioJsons = await prisma.relatorioJson.findMany()
     * 
     * // Get first 10 RelatorioJsons
     * const relatorioJsons = await prisma.relatorioJson.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relatorioJsonWithIdOnly = await prisma.relatorioJson.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelatorioJsonFindManyArgs>(args?: SelectSubset<T, RelatorioJsonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RelatorioJson.
     * @param {RelatorioJsonCreateArgs} args - Arguments to create a RelatorioJson.
     * @example
     * // Create one RelatorioJson
     * const RelatorioJson = await prisma.relatorioJson.create({
     *   data: {
     *     // ... data to create a RelatorioJson
     *   }
     * })
     * 
     */
    create<T extends RelatorioJsonCreateArgs>(args: SelectSubset<T, RelatorioJsonCreateArgs<ExtArgs>>): Prisma__RelatorioJsonClient<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RelatorioJsons.
     * @param {RelatorioJsonCreateManyArgs} args - Arguments to create many RelatorioJsons.
     * @example
     * // Create many RelatorioJsons
     * const relatorioJson = await prisma.relatorioJson.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelatorioJsonCreateManyArgs>(args?: SelectSubset<T, RelatorioJsonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RelatorioJson.
     * @param {RelatorioJsonDeleteArgs} args - Arguments to delete one RelatorioJson.
     * @example
     * // Delete one RelatorioJson
     * const RelatorioJson = await prisma.relatorioJson.delete({
     *   where: {
     *     // ... filter to delete one RelatorioJson
     *   }
     * })
     * 
     */
    delete<T extends RelatorioJsonDeleteArgs>(args: SelectSubset<T, RelatorioJsonDeleteArgs<ExtArgs>>): Prisma__RelatorioJsonClient<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RelatorioJson.
     * @param {RelatorioJsonUpdateArgs} args - Arguments to update one RelatorioJson.
     * @example
     * // Update one RelatorioJson
     * const relatorioJson = await prisma.relatorioJson.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelatorioJsonUpdateArgs>(args: SelectSubset<T, RelatorioJsonUpdateArgs<ExtArgs>>): Prisma__RelatorioJsonClient<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RelatorioJsons.
     * @param {RelatorioJsonDeleteManyArgs} args - Arguments to filter RelatorioJsons to delete.
     * @example
     * // Delete a few RelatorioJsons
     * const { count } = await prisma.relatorioJson.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelatorioJsonDeleteManyArgs>(args?: SelectSubset<T, RelatorioJsonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelatorioJsons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioJsonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RelatorioJsons
     * const relatorioJson = await prisma.relatorioJson.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelatorioJsonUpdateManyArgs>(args: SelectSubset<T, RelatorioJsonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RelatorioJson.
     * @param {RelatorioJsonUpsertArgs} args - Arguments to update or create a RelatorioJson.
     * @example
     * // Update or create a RelatorioJson
     * const relatorioJson = await prisma.relatorioJson.upsert({
     *   create: {
     *     // ... data to create a RelatorioJson
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RelatorioJson we want to update
     *   }
     * })
     */
    upsert<T extends RelatorioJsonUpsertArgs>(args: SelectSubset<T, RelatorioJsonUpsertArgs<ExtArgs>>): Prisma__RelatorioJsonClient<$Result.GetResult<Prisma.$RelatorioJsonPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RelatorioJsons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioJsonCountArgs} args - Arguments to filter RelatorioJsons to count.
     * @example
     * // Count the number of RelatorioJsons
     * const count = await prisma.relatorioJson.count({
     *   where: {
     *     // ... the filter for the RelatorioJsons we want to count
     *   }
     * })
    **/
    count<T extends RelatorioJsonCountArgs>(
      args?: Subset<T, RelatorioJsonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelatorioJsonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RelatorioJson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioJsonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelatorioJsonAggregateArgs>(args: Subset<T, RelatorioJsonAggregateArgs>): Prisma.PrismaPromise<GetRelatorioJsonAggregateType<T>>

    /**
     * Group by RelatorioJson.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatorioJsonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelatorioJsonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelatorioJsonGroupByArgs['orderBy'] }
        : { orderBy?: RelatorioJsonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelatorioJsonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelatorioJsonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RelatorioJson model
   */
  readonly fields: RelatorioJsonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RelatorioJson.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelatorioJsonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RelatorioJson model
   */ 
  interface RelatorioJsonFieldRefs {
    readonly id: FieldRef<"RelatorioJson", 'Int'>
    readonly usuarioId: FieldRef<"RelatorioJson", 'Int'>
    readonly tipo: FieldRef<"RelatorioJson", 'TipoRelatorioJsonEnum'>
    readonly dataInicio: FieldRef<"RelatorioJson", 'DateTime'>
    readonly dataFim: FieldRef<"RelatorioJson", 'DateTime'>
    readonly dados: FieldRef<"RelatorioJson", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * RelatorioJson findUnique
   */
  export type RelatorioJsonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * Filter, which RelatorioJson to fetch.
     */
    where: RelatorioJsonWhereUniqueInput
  }

  /**
   * RelatorioJson findUniqueOrThrow
   */
  export type RelatorioJsonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * Filter, which RelatorioJson to fetch.
     */
    where: RelatorioJsonWhereUniqueInput
  }

  /**
   * RelatorioJson findFirst
   */
  export type RelatorioJsonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * Filter, which RelatorioJson to fetch.
     */
    where?: RelatorioJsonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatorioJsons to fetch.
     */
    orderBy?: RelatorioJsonOrderByWithRelationInput | RelatorioJsonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelatorioJsons.
     */
    cursor?: RelatorioJsonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatorioJsons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatorioJsons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelatorioJsons.
     */
    distinct?: RelatorioJsonScalarFieldEnum | RelatorioJsonScalarFieldEnum[]
  }

  /**
   * RelatorioJson findFirstOrThrow
   */
  export type RelatorioJsonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * Filter, which RelatorioJson to fetch.
     */
    where?: RelatorioJsonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatorioJsons to fetch.
     */
    orderBy?: RelatorioJsonOrderByWithRelationInput | RelatorioJsonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelatorioJsons.
     */
    cursor?: RelatorioJsonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatorioJsons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatorioJsons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelatorioJsons.
     */
    distinct?: RelatorioJsonScalarFieldEnum | RelatorioJsonScalarFieldEnum[]
  }

  /**
   * RelatorioJson findMany
   */
  export type RelatorioJsonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * Filter, which RelatorioJsons to fetch.
     */
    where?: RelatorioJsonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatorioJsons to fetch.
     */
    orderBy?: RelatorioJsonOrderByWithRelationInput | RelatorioJsonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RelatorioJsons.
     */
    cursor?: RelatorioJsonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatorioJsons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatorioJsons.
     */
    skip?: number
    distinct?: RelatorioJsonScalarFieldEnum | RelatorioJsonScalarFieldEnum[]
  }

  /**
   * RelatorioJson create
   */
  export type RelatorioJsonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * The data needed to create a RelatorioJson.
     */
    data: XOR<RelatorioJsonCreateInput, RelatorioJsonUncheckedCreateInput>
  }

  /**
   * RelatorioJson createMany
   */
  export type RelatorioJsonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RelatorioJsons.
     */
    data: RelatorioJsonCreateManyInput | RelatorioJsonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RelatorioJson update
   */
  export type RelatorioJsonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * The data needed to update a RelatorioJson.
     */
    data: XOR<RelatorioJsonUpdateInput, RelatorioJsonUncheckedUpdateInput>
    /**
     * Choose, which RelatorioJson to update.
     */
    where: RelatorioJsonWhereUniqueInput
  }

  /**
   * RelatorioJson updateMany
   */
  export type RelatorioJsonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RelatorioJsons.
     */
    data: XOR<RelatorioJsonUpdateManyMutationInput, RelatorioJsonUncheckedUpdateManyInput>
    /**
     * Filter which RelatorioJsons to update
     */
    where?: RelatorioJsonWhereInput
  }

  /**
   * RelatorioJson upsert
   */
  export type RelatorioJsonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * The filter to search for the RelatorioJson to update in case it exists.
     */
    where: RelatorioJsonWhereUniqueInput
    /**
     * In case the RelatorioJson found by the `where` argument doesn't exist, create a new RelatorioJson with this data.
     */
    create: XOR<RelatorioJsonCreateInput, RelatorioJsonUncheckedCreateInput>
    /**
     * In case the RelatorioJson was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelatorioJsonUpdateInput, RelatorioJsonUncheckedUpdateInput>
  }

  /**
   * RelatorioJson delete
   */
  export type RelatorioJsonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
    /**
     * Filter which RelatorioJson to delete.
     */
    where: RelatorioJsonWhereUniqueInput
  }

  /**
   * RelatorioJson deleteMany
   */
  export type RelatorioJsonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelatorioJsons to delete
     */
    where?: RelatorioJsonWhereInput
  }

  /**
   * RelatorioJson without action
   */
  export type RelatorioJsonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatorioJson
     */
    select?: RelatorioJsonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatorioJsonInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const TransacaoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    data: 'data',
    descricao: 'descricao',
    categoria: 'categoria',
    valor: 'valor',
    tags: 'tags'
  };

  export type TransacaoScalarFieldEnum = (typeof TransacaoScalarFieldEnum)[keyof typeof TransacaoScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    tipo: 'tipo'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const SubcategoriaScalarFieldEnum: {
    id: 'id',
    categoriaId: 'categoriaId',
    nome: 'nome'
  };

  export type SubcategoriaScalarFieldEnum = (typeof SubcategoriaScalarFieldEnum)[keyof typeof SubcategoriaScalarFieldEnum]


  export const OrcamentoScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    categoriaId: 'categoriaId',
    valor: 'valor',
    dataInicio: 'dataInicio',
    dataFim: 'dataFim'
  };

  export type OrcamentoScalarFieldEnum = (typeof OrcamentoScalarFieldEnum)[keyof typeof OrcamentoScalarFieldEnum]


  export const HistoricoOrcamentoScalarFieldEnum: {
    id: 'id',
    orcamentoId: 'orcamentoId',
    data: 'data',
    valor: 'valor',
    status: 'status',
    tipoAjuste: 'tipoAjuste'
  };

  export type HistoricoOrcamentoScalarFieldEnum = (typeof HistoricoOrcamentoScalarFieldEnum)[keyof typeof HistoricoOrcamentoScalarFieldEnum]


  export const RelatorioScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tipo: 'tipo',
    dataInicio: 'dataInicio',
    dataFim: 'dataFim',
    relatorio: 'relatorio',
    formato: 'formato'
  };

  export type RelatorioScalarFieldEnum = (typeof RelatorioScalarFieldEnum)[keyof typeof RelatorioScalarFieldEnum]


  export const RelatorioJsonScalarFieldEnum: {
    id: 'id',
    usuarioId: 'usuarioId',
    tipo: 'tipo',
    dataInicio: 'dataInicio',
    dataFim: 'dataFim',
    dados: 'dados'
  };

  export type RelatorioJsonScalarFieldEnum = (typeof RelatorioJsonScalarFieldEnum)[keyof typeof RelatorioJsonScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'CategoriaEnum'
   */
  export type EnumCategoriaEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoriaEnum'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'TipoCategoriaEnum'
   */
  export type EnumTipoCategoriaEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoCategoriaEnum'>
    


  /**
   * Reference to a field of type 'StatusEnum'
   */
  export type EnumStatusEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusEnum'>
    


  /**
   * Reference to a field of type 'TipoAjusteEnum'
   */
  export type EnumTipoAjusteEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoAjusteEnum'>
    


  /**
   * Reference to a field of type 'TipoRelatorioEnum'
   */
  export type EnumTipoRelatorioEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoRelatorioEnum'>
    


  /**
   * Reference to a field of type 'TipoRelatorioJsonEnum'
   */
  export type EnumTipoRelatorioJsonEnumFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoRelatorioJsonEnum'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    transacoes?: TransacaoListRelationFilter
    orcamentos?: OrcamentoListRelationFilter
    relatorios?: RelatorioListRelationFilter
    relatoriosJson?: RelatorioJsonListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    transacoes?: TransacaoOrderByRelationAggregateInput
    orcamentos?: OrcamentoOrderByRelationAggregateInput
    relatorios?: RelatorioOrderByRelationAggregateInput
    relatoriosJson?: RelatorioJsonOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    transacoes?: TransacaoListRelationFilter
    orcamentos?: OrcamentoListRelationFilter
    relatorios?: RelatorioListRelationFilter
    relatoriosJson?: RelatorioJsonListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
  }

  export type TransacaoWhereInput = {
    AND?: TransacaoWhereInput | TransacaoWhereInput[]
    OR?: TransacaoWhereInput[]
    NOT?: TransacaoWhereInput | TransacaoWhereInput[]
    id?: IntFilter<"Transacao"> | number
    usuarioId?: IntFilter<"Transacao"> | number
    data?: DateTimeFilter<"Transacao"> | Date | string
    descricao?: StringFilter<"Transacao"> | string
    categoria?: EnumCategoriaEnumFilter<"Transacao"> | $Enums.CategoriaEnum
    valor?: FloatFilter<"Transacao"> | number
    tags?: StringNullableFilter<"Transacao"> | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type TransacaoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    categoria?: SortOrder
    valor?: SortOrder
    tags?: SortOrderInput | SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type TransacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransacaoWhereInput | TransacaoWhereInput[]
    OR?: TransacaoWhereInput[]
    NOT?: TransacaoWhereInput | TransacaoWhereInput[]
    usuarioId?: IntFilter<"Transacao"> | number
    data?: DateTimeFilter<"Transacao"> | Date | string
    descricao?: StringFilter<"Transacao"> | string
    categoria?: EnumCategoriaEnumFilter<"Transacao"> | $Enums.CategoriaEnum
    valor?: FloatFilter<"Transacao"> | number
    tags?: StringNullableFilter<"Transacao"> | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type TransacaoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    categoria?: SortOrder
    valor?: SortOrder
    tags?: SortOrderInput | SortOrder
    _count?: TransacaoCountOrderByAggregateInput
    _avg?: TransacaoAvgOrderByAggregateInput
    _max?: TransacaoMaxOrderByAggregateInput
    _min?: TransacaoMinOrderByAggregateInput
    _sum?: TransacaoSumOrderByAggregateInput
  }

  export type TransacaoScalarWhereWithAggregatesInput = {
    AND?: TransacaoScalarWhereWithAggregatesInput | TransacaoScalarWhereWithAggregatesInput[]
    OR?: TransacaoScalarWhereWithAggregatesInput[]
    NOT?: TransacaoScalarWhereWithAggregatesInput | TransacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transacao"> | number
    usuarioId?: IntWithAggregatesFilter<"Transacao"> | number
    data?: DateTimeWithAggregatesFilter<"Transacao"> | Date | string
    descricao?: StringWithAggregatesFilter<"Transacao"> | string
    categoria?: EnumCategoriaEnumWithAggregatesFilter<"Transacao"> | $Enums.CategoriaEnum
    valor?: FloatWithAggregatesFilter<"Transacao"> | number
    tags?: StringNullableWithAggregatesFilter<"Transacao"> | string | null
  }

  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    id?: IntFilter<"Categoria"> | number
    nome?: StringFilter<"Categoria"> | string
    tipo?: EnumTipoCategoriaEnumFilter<"Categoria"> | $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaListRelationFilter
    orcamentos?: OrcamentoListRelationFilter
  }

  export type CategoriaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    subcategorias?: SubcategoriaOrderByRelationAggregateInput
    orcamentos?: OrcamentoOrderByRelationAggregateInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nome?: string
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    tipo?: EnumTipoCategoriaEnumFilter<"Categoria"> | $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaListRelationFilter
    orcamentos?: OrcamentoListRelationFilter
  }, "id" | "nome">

  export type CategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _avg?: CategoriaAvgOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
    _sum?: CategoriaSumOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categoria"> | number
    nome?: StringWithAggregatesFilter<"Categoria"> | string
    tipo?: EnumTipoCategoriaEnumWithAggregatesFilter<"Categoria"> | $Enums.TipoCategoriaEnum
  }

  export type SubcategoriaWhereInput = {
    AND?: SubcategoriaWhereInput | SubcategoriaWhereInput[]
    OR?: SubcategoriaWhereInput[]
    NOT?: SubcategoriaWhereInput | SubcategoriaWhereInput[]
    id?: IntFilter<"Subcategoria"> | number
    categoriaId?: IntFilter<"Subcategoria"> | number
    nome?: StringFilter<"Subcategoria"> | string
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
  }

  export type SubcategoriaOrderByWithRelationInput = {
    id?: SortOrder
    categoriaId?: SortOrder
    nome?: SortOrder
    categoria?: CategoriaOrderByWithRelationInput
  }

  export type SubcategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubcategoriaWhereInput | SubcategoriaWhereInput[]
    OR?: SubcategoriaWhereInput[]
    NOT?: SubcategoriaWhereInput | SubcategoriaWhereInput[]
    categoriaId?: IntFilter<"Subcategoria"> | number
    nome?: StringFilter<"Subcategoria"> | string
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
  }, "id">

  export type SubcategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    categoriaId?: SortOrder
    nome?: SortOrder
    _count?: SubcategoriaCountOrderByAggregateInput
    _avg?: SubcategoriaAvgOrderByAggregateInput
    _max?: SubcategoriaMaxOrderByAggregateInput
    _min?: SubcategoriaMinOrderByAggregateInput
    _sum?: SubcategoriaSumOrderByAggregateInput
  }

  export type SubcategoriaScalarWhereWithAggregatesInput = {
    AND?: SubcategoriaScalarWhereWithAggregatesInput | SubcategoriaScalarWhereWithAggregatesInput[]
    OR?: SubcategoriaScalarWhereWithAggregatesInput[]
    NOT?: SubcategoriaScalarWhereWithAggregatesInput | SubcategoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Subcategoria"> | number
    categoriaId?: IntWithAggregatesFilter<"Subcategoria"> | number
    nome?: StringWithAggregatesFilter<"Subcategoria"> | string
  }

  export type OrcamentoWhereInput = {
    AND?: OrcamentoWhereInput | OrcamentoWhereInput[]
    OR?: OrcamentoWhereInput[]
    NOT?: OrcamentoWhereInput | OrcamentoWhereInput[]
    id?: IntFilter<"Orcamento"> | number
    usuarioId?: IntFilter<"Orcamento"> | number
    categoriaId?: IntFilter<"Orcamento"> | number
    valor?: FloatFilter<"Orcamento"> | number
    dataInicio?: DateTimeFilter<"Orcamento"> | Date | string
    dataFim?: DateTimeFilter<"Orcamento"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
    historicoOrcamentos?: HistoricoOrcamentoListRelationFilter
  }

  export type OrcamentoOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    categoriaId?: SortOrder
    valor?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    categoria?: CategoriaOrderByWithRelationInput
    historicoOrcamentos?: HistoricoOrcamentoOrderByRelationAggregateInput
  }

  export type OrcamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrcamentoWhereInput | OrcamentoWhereInput[]
    OR?: OrcamentoWhereInput[]
    NOT?: OrcamentoWhereInput | OrcamentoWhereInput[]
    usuarioId?: IntFilter<"Orcamento"> | number
    categoriaId?: IntFilter<"Orcamento"> | number
    valor?: FloatFilter<"Orcamento"> | number
    dataInicio?: DateTimeFilter<"Orcamento"> | Date | string
    dataFim?: DateTimeFilter<"Orcamento"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    categoria?: XOR<CategoriaRelationFilter, CategoriaWhereInput>
    historicoOrcamentos?: HistoricoOrcamentoListRelationFilter
  }, "id">

  export type OrcamentoOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    categoriaId?: SortOrder
    valor?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    _count?: OrcamentoCountOrderByAggregateInput
    _avg?: OrcamentoAvgOrderByAggregateInput
    _max?: OrcamentoMaxOrderByAggregateInput
    _min?: OrcamentoMinOrderByAggregateInput
    _sum?: OrcamentoSumOrderByAggregateInput
  }

  export type OrcamentoScalarWhereWithAggregatesInput = {
    AND?: OrcamentoScalarWhereWithAggregatesInput | OrcamentoScalarWhereWithAggregatesInput[]
    OR?: OrcamentoScalarWhereWithAggregatesInput[]
    NOT?: OrcamentoScalarWhereWithAggregatesInput | OrcamentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Orcamento"> | number
    usuarioId?: IntWithAggregatesFilter<"Orcamento"> | number
    categoriaId?: IntWithAggregatesFilter<"Orcamento"> | number
    valor?: FloatWithAggregatesFilter<"Orcamento"> | number
    dataInicio?: DateTimeWithAggregatesFilter<"Orcamento"> | Date | string
    dataFim?: DateTimeWithAggregatesFilter<"Orcamento"> | Date | string
  }

  export type HistoricoOrcamentoWhereInput = {
    AND?: HistoricoOrcamentoWhereInput | HistoricoOrcamentoWhereInput[]
    OR?: HistoricoOrcamentoWhereInput[]
    NOT?: HistoricoOrcamentoWhereInput | HistoricoOrcamentoWhereInput[]
    id?: IntFilter<"HistoricoOrcamento"> | number
    orcamentoId?: IntFilter<"HistoricoOrcamento"> | number
    data?: DateTimeFilter<"HistoricoOrcamento"> | Date | string
    valor?: FloatFilter<"HistoricoOrcamento"> | number
    status?: EnumStatusEnumFilter<"HistoricoOrcamento"> | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFilter<"HistoricoOrcamento"> | $Enums.TipoAjusteEnum
    orcamento?: XOR<OrcamentoRelationFilter, OrcamentoWhereInput>
  }

  export type HistoricoOrcamentoOrderByWithRelationInput = {
    id?: SortOrder
    orcamentoId?: SortOrder
    data?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    tipoAjuste?: SortOrder
    orcamento?: OrcamentoOrderByWithRelationInput
  }

  export type HistoricoOrcamentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HistoricoOrcamentoWhereInput | HistoricoOrcamentoWhereInput[]
    OR?: HistoricoOrcamentoWhereInput[]
    NOT?: HistoricoOrcamentoWhereInput | HistoricoOrcamentoWhereInput[]
    orcamentoId?: IntFilter<"HistoricoOrcamento"> | number
    data?: DateTimeFilter<"HistoricoOrcamento"> | Date | string
    valor?: FloatFilter<"HistoricoOrcamento"> | number
    status?: EnumStatusEnumFilter<"HistoricoOrcamento"> | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFilter<"HistoricoOrcamento"> | $Enums.TipoAjusteEnum
    orcamento?: XOR<OrcamentoRelationFilter, OrcamentoWhereInput>
  }, "id">

  export type HistoricoOrcamentoOrderByWithAggregationInput = {
    id?: SortOrder
    orcamentoId?: SortOrder
    data?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    tipoAjuste?: SortOrder
    _count?: HistoricoOrcamentoCountOrderByAggregateInput
    _avg?: HistoricoOrcamentoAvgOrderByAggregateInput
    _max?: HistoricoOrcamentoMaxOrderByAggregateInput
    _min?: HistoricoOrcamentoMinOrderByAggregateInput
    _sum?: HistoricoOrcamentoSumOrderByAggregateInput
  }

  export type HistoricoOrcamentoScalarWhereWithAggregatesInput = {
    AND?: HistoricoOrcamentoScalarWhereWithAggregatesInput | HistoricoOrcamentoScalarWhereWithAggregatesInput[]
    OR?: HistoricoOrcamentoScalarWhereWithAggregatesInput[]
    NOT?: HistoricoOrcamentoScalarWhereWithAggregatesInput | HistoricoOrcamentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HistoricoOrcamento"> | number
    orcamentoId?: IntWithAggregatesFilter<"HistoricoOrcamento"> | number
    data?: DateTimeWithAggregatesFilter<"HistoricoOrcamento"> | Date | string
    valor?: FloatWithAggregatesFilter<"HistoricoOrcamento"> | number
    status?: EnumStatusEnumWithAggregatesFilter<"HistoricoOrcamento"> | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumWithAggregatesFilter<"HistoricoOrcamento"> | $Enums.TipoAjusteEnum
  }

  export type RelatorioWhereInput = {
    AND?: RelatorioWhereInput | RelatorioWhereInput[]
    OR?: RelatorioWhereInput[]
    NOT?: RelatorioWhereInput | RelatorioWhereInput[]
    id?: IntFilter<"Relatorio"> | number
    usuarioId?: IntFilter<"Relatorio"> | number
    tipo?: EnumTipoRelatorioEnumFilter<"Relatorio"> | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFilter<"Relatorio"> | Date | string
    dataFim?: DateTimeFilter<"Relatorio"> | Date | string
    relatorio?: StringFilter<"Relatorio"> | string
    formato?: StringNullableFilter<"Relatorio"> | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type RelatorioOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    relatorio?: SortOrder
    formato?: SortOrderInput | SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type RelatorioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RelatorioWhereInput | RelatorioWhereInput[]
    OR?: RelatorioWhereInput[]
    NOT?: RelatorioWhereInput | RelatorioWhereInput[]
    usuarioId?: IntFilter<"Relatorio"> | number
    tipo?: EnumTipoRelatorioEnumFilter<"Relatorio"> | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFilter<"Relatorio"> | Date | string
    dataFim?: DateTimeFilter<"Relatorio"> | Date | string
    relatorio?: StringFilter<"Relatorio"> | string
    formato?: StringNullableFilter<"Relatorio"> | string | null
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type RelatorioOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    relatorio?: SortOrder
    formato?: SortOrderInput | SortOrder
    _count?: RelatorioCountOrderByAggregateInput
    _avg?: RelatorioAvgOrderByAggregateInput
    _max?: RelatorioMaxOrderByAggregateInput
    _min?: RelatorioMinOrderByAggregateInput
    _sum?: RelatorioSumOrderByAggregateInput
  }

  export type RelatorioScalarWhereWithAggregatesInput = {
    AND?: RelatorioScalarWhereWithAggregatesInput | RelatorioScalarWhereWithAggregatesInput[]
    OR?: RelatorioScalarWhereWithAggregatesInput[]
    NOT?: RelatorioScalarWhereWithAggregatesInput | RelatorioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Relatorio"> | number
    usuarioId?: IntWithAggregatesFilter<"Relatorio"> | number
    tipo?: EnumTipoRelatorioEnumWithAggregatesFilter<"Relatorio"> | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeWithAggregatesFilter<"Relatorio"> | Date | string
    dataFim?: DateTimeWithAggregatesFilter<"Relatorio"> | Date | string
    relatorio?: StringWithAggregatesFilter<"Relatorio"> | string
    formato?: StringNullableWithAggregatesFilter<"Relatorio"> | string | null
  }

  export type RelatorioJsonWhereInput = {
    AND?: RelatorioJsonWhereInput | RelatorioJsonWhereInput[]
    OR?: RelatorioJsonWhereInput[]
    NOT?: RelatorioJsonWhereInput | RelatorioJsonWhereInput[]
    id?: IntFilter<"RelatorioJson"> | number
    usuarioId?: IntFilter<"RelatorioJson"> | number
    tipo?: EnumTipoRelatorioJsonEnumFilter<"RelatorioJson"> | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFilter<"RelatorioJson"> | Date | string
    dataFim?: DateTimeFilter<"RelatorioJson"> | Date | string
    dados?: JsonFilter<"RelatorioJson">
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type RelatorioJsonOrderByWithRelationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    dados?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type RelatorioJsonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RelatorioJsonWhereInput | RelatorioJsonWhereInput[]
    OR?: RelatorioJsonWhereInput[]
    NOT?: RelatorioJsonWhereInput | RelatorioJsonWhereInput[]
    usuarioId?: IntFilter<"RelatorioJson"> | number
    tipo?: EnumTipoRelatorioJsonEnumFilter<"RelatorioJson"> | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFilter<"RelatorioJson"> | Date | string
    dataFim?: DateTimeFilter<"RelatorioJson"> | Date | string
    dados?: JsonFilter<"RelatorioJson">
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type RelatorioJsonOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    dados?: SortOrder
    _count?: RelatorioJsonCountOrderByAggregateInput
    _avg?: RelatorioJsonAvgOrderByAggregateInput
    _max?: RelatorioJsonMaxOrderByAggregateInput
    _min?: RelatorioJsonMinOrderByAggregateInput
    _sum?: RelatorioJsonSumOrderByAggregateInput
  }

  export type RelatorioJsonScalarWhereWithAggregatesInput = {
    AND?: RelatorioJsonScalarWhereWithAggregatesInput | RelatorioJsonScalarWhereWithAggregatesInput[]
    OR?: RelatorioJsonScalarWhereWithAggregatesInput[]
    NOT?: RelatorioJsonScalarWhereWithAggregatesInput | RelatorioJsonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RelatorioJson"> | number
    usuarioId?: IntWithAggregatesFilter<"RelatorioJson"> | number
    tipo?: EnumTipoRelatorioJsonEnumWithAggregatesFilter<"RelatorioJson"> | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeWithAggregatesFilter<"RelatorioJson"> | Date | string
    dataFim?: DateTimeWithAggregatesFilter<"RelatorioJson"> | Date | string
    dados?: JsonWithAggregatesFilter<"RelatorioJson">
  }

  export type UsuarioCreateInput = {
    nome: string
    email: string
    senha: string
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    orcamentos?: OrcamentoCreateNestedManyWithoutUsuarioInput
    relatorios?: RelatorioCreateNestedManyWithoutUsuarioInput
    relatoriosJson?: RelatorioJsonCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    orcamentos?: OrcamentoUncheckedCreateNestedManyWithoutUsuarioInput
    relatorios?: RelatorioUncheckedCreateNestedManyWithoutUsuarioInput
    relatoriosJson?: RelatorioJsonUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    orcamentos?: OrcamentoUpdateManyWithoutUsuarioNestedInput
    relatorios?: RelatorioUpdateManyWithoutUsuarioNestedInput
    relatoriosJson?: RelatorioJsonUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    orcamentos?: OrcamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    relatorios?: RelatorioUncheckedUpdateManyWithoutUsuarioNestedInput
    relatoriosJson?: RelatorioJsonUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type TransacaoCreateInput = {
    data: Date | string
    descricao: string
    categoria: $Enums.CategoriaEnum
    valor: number
    tags?: string | null
    usuario: UsuarioCreateNestedOneWithoutTransacoesInput
  }

  export type TransacaoUncheckedCreateInput = {
    id?: number
    usuarioId: number
    data: Date | string
    descricao: string
    categoria: $Enums.CategoriaEnum
    valor: number
    tags?: string | null
  }

  export type TransacaoUpdateInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaEnumFieldUpdateOperationsInput | $Enums.CategoriaEnum
    valor?: FloatFieldUpdateOperationsInput | number
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutTransacoesNestedInput
  }

  export type TransacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaEnumFieldUpdateOperationsInput | $Enums.CategoriaEnum
    valor?: FloatFieldUpdateOperationsInput | number
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransacaoCreateManyInput = {
    id?: number
    usuarioId: number
    data: Date | string
    descricao: string
    categoria: $Enums.CategoriaEnum
    valor: number
    tags?: string | null
  }

  export type TransacaoUpdateManyMutationInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaEnumFieldUpdateOperationsInput | $Enums.CategoriaEnum
    valor?: FloatFieldUpdateOperationsInput | number
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaEnumFieldUpdateOperationsInput | $Enums.CategoriaEnum
    valor?: FloatFieldUpdateOperationsInput | number
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoriaCreateInput = {
    nome: string
    tipo: $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaCreateNestedManyWithoutCategoriaInput
    orcamentos?: OrcamentoCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id?: number
    nome: string
    tipo: $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaUncheckedCreateNestedManyWithoutCategoriaInput
    orcamentos?: OrcamentoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoCategoriaEnumFieldUpdateOperationsInput | $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaUpdateManyWithoutCategoriaNestedInput
    orcamentos?: OrcamentoUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoCategoriaEnumFieldUpdateOperationsInput | $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaUncheckedUpdateManyWithoutCategoriaNestedInput
    orcamentos?: OrcamentoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaCreateManyInput = {
    id?: number
    nome: string
    tipo: $Enums.TipoCategoriaEnum
  }

  export type CategoriaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoCategoriaEnumFieldUpdateOperationsInput | $Enums.TipoCategoriaEnum
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoCategoriaEnumFieldUpdateOperationsInput | $Enums.TipoCategoriaEnum
  }

  export type SubcategoriaCreateInput = {
    nome: string
    categoria: CategoriaCreateNestedOneWithoutSubcategoriasInput
  }

  export type SubcategoriaUncheckedCreateInput = {
    id?: number
    categoriaId: number
    nome: string
  }

  export type SubcategoriaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUpdateOneRequiredWithoutSubcategoriasNestedInput
  }

  export type SubcategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type SubcategoriaCreateManyInput = {
    id?: number
    categoriaId: number
    nome: string
  }

  export type SubcategoriaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type SubcategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type OrcamentoCreateInput = {
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
    usuario: UsuarioCreateNestedOneWithoutOrcamentosInput
    categoria: CategoriaCreateNestedOneWithoutOrcamentosInput
    historicoOrcamentos?: HistoricoOrcamentoCreateNestedManyWithoutOrcamentoInput
  }

  export type OrcamentoUncheckedCreateInput = {
    id?: number
    usuarioId: number
    categoriaId: number
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
    historicoOrcamentos?: HistoricoOrcamentoUncheckedCreateNestedManyWithoutOrcamentoInput
  }

  export type OrcamentoUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutOrcamentosNestedInput
    categoria?: CategoriaUpdateOneRequiredWithoutOrcamentosNestedInput
    historicoOrcamentos?: HistoricoOrcamentoUpdateManyWithoutOrcamentoNestedInput
  }

  export type OrcamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    historicoOrcamentos?: HistoricoOrcamentoUncheckedUpdateManyWithoutOrcamentoNestedInput
  }

  export type OrcamentoCreateManyInput = {
    id?: number
    usuarioId: number
    categoriaId: number
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
  }

  export type OrcamentoUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrcamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoricoOrcamentoCreateInput = {
    data: Date | string
    valor: number
    status: $Enums.StatusEnum
    tipoAjuste: $Enums.TipoAjusteEnum
    orcamento: OrcamentoCreateNestedOneWithoutHistoricoOrcamentosInput
  }

  export type HistoricoOrcamentoUncheckedCreateInput = {
    id?: number
    orcamentoId: number
    data: Date | string
    valor: number
    status: $Enums.StatusEnum
    tipoAjuste: $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoUpdateInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFieldUpdateOperationsInput | $Enums.TipoAjusteEnum
    orcamento?: OrcamentoUpdateOneRequiredWithoutHistoricoOrcamentosNestedInput
  }

  export type HistoricoOrcamentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orcamentoId?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFieldUpdateOperationsInput | $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoCreateManyInput = {
    id?: number
    orcamentoId: number
    data: Date | string
    valor: number
    status: $Enums.StatusEnum
    tipoAjuste: $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoUpdateManyMutationInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFieldUpdateOperationsInput | $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orcamentoId?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFieldUpdateOperationsInput | $Enums.TipoAjusteEnum
  }

  export type RelatorioCreateInput = {
    tipo: $Enums.TipoRelatorioEnum
    dataInicio: Date | string
    dataFim: Date | string
    relatorio: string
    formato?: string | null
    usuario: UsuarioCreateNestedOneWithoutRelatoriosInput
  }

  export type RelatorioUncheckedCreateInput = {
    id?: number
    usuarioId: number
    tipo: $Enums.TipoRelatorioEnum
    dataInicio: Date | string
    dataFim: Date | string
    relatorio: string
    formato?: string | null
  }

  export type RelatorioUpdateInput = {
    tipo?: EnumTipoRelatorioEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    relatorio?: StringFieldUpdateOperationsInput | string
    formato?: NullableStringFieldUpdateOperationsInput | string | null
    usuario?: UsuarioUpdateOneRequiredWithoutRelatoriosNestedInput
  }

  export type RelatorioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoRelatorioEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    relatorio?: StringFieldUpdateOperationsInput | string
    formato?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatorioCreateManyInput = {
    id?: number
    usuarioId: number
    tipo: $Enums.TipoRelatorioEnum
    dataInicio: Date | string
    dataFim: Date | string
    relatorio: string
    formato?: string | null
  }

  export type RelatorioUpdateManyMutationInput = {
    tipo?: EnumTipoRelatorioEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    relatorio?: StringFieldUpdateOperationsInput | string
    formato?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatorioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoRelatorioEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    relatorio?: StringFieldUpdateOperationsInput | string
    formato?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatorioJsonCreateInput = {
    tipo: $Enums.TipoRelatorioJsonEnum
    dataInicio: Date | string
    dataFim: Date | string
    dados: JsonNullValueInput | InputJsonValue
    usuario: UsuarioCreateNestedOneWithoutRelatoriosJsonInput
  }

  export type RelatorioJsonUncheckedCreateInput = {
    id?: number
    usuarioId: number
    tipo: $Enums.TipoRelatorioJsonEnum
    dataInicio: Date | string
    dataFim: Date | string
    dados: JsonNullValueInput | InputJsonValue
  }

  export type RelatorioJsonUpdateInput = {
    tipo?: EnumTipoRelatorioJsonEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    dados?: JsonNullValueInput | InputJsonValue
    usuario?: UsuarioUpdateOneRequiredWithoutRelatoriosJsonNestedInput
  }

  export type RelatorioJsonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoRelatorioJsonEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    dados?: JsonNullValueInput | InputJsonValue
  }

  export type RelatorioJsonCreateManyInput = {
    id?: number
    usuarioId: number
    tipo: $Enums.TipoRelatorioJsonEnum
    dataInicio: Date | string
    dataFim: Date | string
    dados: JsonNullValueInput | InputJsonValue
  }

  export type RelatorioJsonUpdateManyMutationInput = {
    tipo?: EnumTipoRelatorioJsonEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    dados?: JsonNullValueInput | InputJsonValue
  }

  export type RelatorioJsonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoRelatorioJsonEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    dados?: JsonNullValueInput | InputJsonValue
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type TransacaoListRelationFilter = {
    every?: TransacaoWhereInput
    some?: TransacaoWhereInput
    none?: TransacaoWhereInput
  }

  export type OrcamentoListRelationFilter = {
    every?: OrcamentoWhereInput
    some?: OrcamentoWhereInput
    none?: OrcamentoWhereInput
  }

  export type RelatorioListRelationFilter = {
    every?: RelatorioWhereInput
    some?: RelatorioWhereInput
    none?: RelatorioWhereInput
  }
  export type RelatorioJsonListRelationFilter = 
    | PatchUndefined<
        Either<Required<RelatorioJsonListRelationFilterBase>, Exclude<keyof Required<RelatorioJsonListRelationFilterBase>, 'path'>>,
        Required<RelatorioJsonListRelationFilterBase>
      >
    | OptionalFlat<Omit<Required<RelatorioJsonListRelationFilterBase>, 'path'>>

  export type RelatorioJsonListRelationFilterBase = {
    every?: RelatorioJsonWhereInput
    some?: RelatorioJsonWhereInput
    none?: RelatorioJsonWhereInput
  }

  export type TransacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrcamentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelatorioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelatorioJsonOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumCategoriaEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoriaEnum | EnumCategoriaEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CategoriaEnum[]
    notIn?: $Enums.CategoriaEnum[]
    not?: NestedEnumCategoriaEnumFilter<$PrismaModel> | $Enums.CategoriaEnum
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TransacaoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    categoria?: SortOrder
    valor?: SortOrder
    tags?: SortOrder
  }

  export type TransacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
  }

  export type TransacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    categoria?: SortOrder
    valor?: SortOrder
    tags?: SortOrder
  }

  export type TransacaoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    data?: SortOrder
    descricao?: SortOrder
    categoria?: SortOrder
    valor?: SortOrder
    tags?: SortOrder
  }

  export type TransacaoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    valor?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumCategoriaEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoriaEnum | EnumCategoriaEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CategoriaEnum[]
    notIn?: $Enums.CategoriaEnum[]
    not?: NestedEnumCategoriaEnumWithAggregatesFilter<$PrismaModel> | $Enums.CategoriaEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoriaEnumFilter<$PrismaModel>
    _max?: NestedEnumCategoriaEnumFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumTipoCategoriaEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCategoriaEnum | EnumTipoCategoriaEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCategoriaEnum[]
    notIn?: $Enums.TipoCategoriaEnum[]
    not?: NestedEnumTipoCategoriaEnumFilter<$PrismaModel> | $Enums.TipoCategoriaEnum
  }

  export type SubcategoriaListRelationFilter = {
    every?: SubcategoriaWhereInput
    some?: SubcategoriaWhereInput
    none?: SubcategoriaWhereInput
  }

  export type SubcategoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
  }

  export type CategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    tipo?: SortOrder
  }

  export type CategoriaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumTipoCategoriaEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCategoriaEnum | EnumTipoCategoriaEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCategoriaEnum[]
    notIn?: $Enums.TipoCategoriaEnum[]
    not?: NestedEnumTipoCategoriaEnumWithAggregatesFilter<$PrismaModel> | $Enums.TipoCategoriaEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoCategoriaEnumFilter<$PrismaModel>
    _max?: NestedEnumTipoCategoriaEnumFilter<$PrismaModel>
  }

  export type CategoriaRelationFilter = {
    is?: CategoriaWhereInput
    isNot?: CategoriaWhereInput
  }

  export type SubcategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    categoriaId?: SortOrder
    nome?: SortOrder
  }

  export type SubcategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
    categoriaId?: SortOrder
  }

  export type SubcategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    categoriaId?: SortOrder
    nome?: SortOrder
  }

  export type SubcategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    categoriaId?: SortOrder
    nome?: SortOrder
  }

  export type SubcategoriaSumOrderByAggregateInput = {
    id?: SortOrder
    categoriaId?: SortOrder
  }

  export type HistoricoOrcamentoListRelationFilter = {
    every?: HistoricoOrcamentoWhereInput
    some?: HistoricoOrcamentoWhereInput
    none?: HistoricoOrcamentoWhereInput
  }

  export type HistoricoOrcamentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrcamentoCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    categoriaId?: SortOrder
    valor?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
  }

  export type OrcamentoAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    categoriaId?: SortOrder
    valor?: SortOrder
  }

  export type OrcamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    categoriaId?: SortOrder
    valor?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
  }

  export type OrcamentoMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    categoriaId?: SortOrder
    valor?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
  }

  export type OrcamentoSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    categoriaId?: SortOrder
    valor?: SortOrder
  }

  export type EnumStatusEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEnum | EnumStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEnum[]
    notIn?: $Enums.StatusEnum[]
    not?: NestedEnumStatusEnumFilter<$PrismaModel> | $Enums.StatusEnum
  }

  export type EnumTipoAjusteEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoAjusteEnum | EnumTipoAjusteEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoAjusteEnum[]
    notIn?: $Enums.TipoAjusteEnum[]
    not?: NestedEnumTipoAjusteEnumFilter<$PrismaModel> | $Enums.TipoAjusteEnum
  }

  export type OrcamentoRelationFilter = {
    is?: OrcamentoWhereInput
    isNot?: OrcamentoWhereInput
  }

  export type HistoricoOrcamentoCountOrderByAggregateInput = {
    id?: SortOrder
    orcamentoId?: SortOrder
    data?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    tipoAjuste?: SortOrder
  }

  export type HistoricoOrcamentoAvgOrderByAggregateInput = {
    id?: SortOrder
    orcamentoId?: SortOrder
    valor?: SortOrder
  }

  export type HistoricoOrcamentoMaxOrderByAggregateInput = {
    id?: SortOrder
    orcamentoId?: SortOrder
    data?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    tipoAjuste?: SortOrder
  }

  export type HistoricoOrcamentoMinOrderByAggregateInput = {
    id?: SortOrder
    orcamentoId?: SortOrder
    data?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    tipoAjuste?: SortOrder
  }

  export type HistoricoOrcamentoSumOrderByAggregateInput = {
    id?: SortOrder
    orcamentoId?: SortOrder
    valor?: SortOrder
  }

  export type EnumStatusEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEnum | EnumStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEnum[]
    notIn?: $Enums.StatusEnum[]
    not?: NestedEnumStatusEnumWithAggregatesFilter<$PrismaModel> | $Enums.StatusEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusEnumFilter<$PrismaModel>
    _max?: NestedEnumStatusEnumFilter<$PrismaModel>
  }

  export type EnumTipoAjusteEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoAjusteEnum | EnumTipoAjusteEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoAjusteEnum[]
    notIn?: $Enums.TipoAjusteEnum[]
    not?: NestedEnumTipoAjusteEnumWithAggregatesFilter<$PrismaModel> | $Enums.TipoAjusteEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoAjusteEnumFilter<$PrismaModel>
    _max?: NestedEnumTipoAjusteEnumFilter<$PrismaModel>
  }

  export type EnumTipoRelatorioEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoRelatorioEnum | EnumTipoRelatorioEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoRelatorioEnum[]
    notIn?: $Enums.TipoRelatorioEnum[]
    not?: NestedEnumTipoRelatorioEnumFilter<$PrismaModel> | $Enums.TipoRelatorioEnum
  }

  export type RelatorioCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    relatorio?: SortOrder
    formato?: SortOrder
  }

  export type RelatorioAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type RelatorioMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    relatorio?: SortOrder
    formato?: SortOrder
  }

  export type RelatorioMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    relatorio?: SortOrder
    formato?: SortOrder
  }

  export type RelatorioSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnumTipoRelatorioEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoRelatorioEnum | EnumTipoRelatorioEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoRelatorioEnum[]
    notIn?: $Enums.TipoRelatorioEnum[]
    not?: NestedEnumTipoRelatorioEnumWithAggregatesFilter<$PrismaModel> | $Enums.TipoRelatorioEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoRelatorioEnumFilter<$PrismaModel>
    _max?: NestedEnumTipoRelatorioEnumFilter<$PrismaModel>
  }
  export type EnumTipoRelatorioJsonEnumFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<EnumTipoRelatorioJsonEnumFilterBase<$PrismaModel>>, Exclude<keyof Required<EnumTipoRelatorioJsonEnumFilterBase<$PrismaModel>>, 'path'>>,
        Required<EnumTipoRelatorioJsonEnumFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<EnumTipoRelatorioJsonEnumFilterBase<$PrismaModel>>, 'path'>>

  export type EnumTipoRelatorioJsonEnumFilterBase<$PrismaModel = never> = {
    equals?: $Enums.TipoRelatorioJsonEnum | EnumTipoRelatorioJsonEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoRelatorioJsonEnum[]
    notIn?: $Enums.TipoRelatorioJsonEnum[]
    not?: NestedEnumTipoRelatorioJsonEnumFilter<$PrismaModel> | $Enums.TipoRelatorioJsonEnum
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type RelatorioJsonCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
    dados?: SortOrder
  }

  export type RelatorioJsonAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type RelatorioJsonMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
  }

  export type RelatorioJsonMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
    tipo?: SortOrder
    dataInicio?: SortOrder
    dataFim?: SortOrder
  }

  export type RelatorioJsonSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }
  export type EnumTipoRelatorioJsonEnumWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<EnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<EnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<EnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<EnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type EnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: $Enums.TipoRelatorioJsonEnum | EnumTipoRelatorioJsonEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoRelatorioJsonEnum[]
    notIn?: $Enums.TipoRelatorioJsonEnum[]
    not?: NestedEnumTipoRelatorioJsonEnumWithAggregatesFilter<$PrismaModel> | $Enums.TipoRelatorioJsonEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoRelatorioJsonEnumFilter<$PrismaModel>
    _max?: NestedEnumTipoRelatorioJsonEnumFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type TransacaoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput> | TransacaoCreateWithoutUsuarioInput[] | TransacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TransacaoCreateOrConnectWithoutUsuarioInput | TransacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: TransacaoCreateManyUsuarioInputEnvelope
    connect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
  }

  export type OrcamentoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<OrcamentoCreateWithoutUsuarioInput, OrcamentoUncheckedCreateWithoutUsuarioInput> | OrcamentoCreateWithoutUsuarioInput[] | OrcamentoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: OrcamentoCreateOrConnectWithoutUsuarioInput | OrcamentoCreateOrConnectWithoutUsuarioInput[]
    createMany?: OrcamentoCreateManyUsuarioInputEnvelope
    connect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
  }

  export type RelatorioCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RelatorioCreateWithoutUsuarioInput, RelatorioUncheckedCreateWithoutUsuarioInput> | RelatorioCreateWithoutUsuarioInput[] | RelatorioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RelatorioCreateOrConnectWithoutUsuarioInput | RelatorioCreateOrConnectWithoutUsuarioInput[]
    createMany?: RelatorioCreateManyUsuarioInputEnvelope
    connect?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
  }

  export type RelatorioJsonCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RelatorioJsonCreateWithoutUsuarioInput, RelatorioJsonUncheckedCreateWithoutUsuarioInput> | RelatorioJsonCreateWithoutUsuarioInput[] | RelatorioJsonUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RelatorioJsonCreateOrConnectWithoutUsuarioInput | RelatorioJsonCreateOrConnectWithoutUsuarioInput[]
    createMany?: RelatorioJsonCreateManyUsuarioInputEnvelope
    connect?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
  }

  export type TransacaoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput> | TransacaoCreateWithoutUsuarioInput[] | TransacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TransacaoCreateOrConnectWithoutUsuarioInput | TransacaoCreateOrConnectWithoutUsuarioInput[]
    createMany?: TransacaoCreateManyUsuarioInputEnvelope
    connect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
  }

  export type OrcamentoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<OrcamentoCreateWithoutUsuarioInput, OrcamentoUncheckedCreateWithoutUsuarioInput> | OrcamentoCreateWithoutUsuarioInput[] | OrcamentoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: OrcamentoCreateOrConnectWithoutUsuarioInput | OrcamentoCreateOrConnectWithoutUsuarioInput[]
    createMany?: OrcamentoCreateManyUsuarioInputEnvelope
    connect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
  }

  export type RelatorioUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RelatorioCreateWithoutUsuarioInput, RelatorioUncheckedCreateWithoutUsuarioInput> | RelatorioCreateWithoutUsuarioInput[] | RelatorioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RelatorioCreateOrConnectWithoutUsuarioInput | RelatorioCreateOrConnectWithoutUsuarioInput[]
    createMany?: RelatorioCreateManyUsuarioInputEnvelope
    connect?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
  }

  export type RelatorioJsonUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RelatorioJsonCreateWithoutUsuarioInput, RelatorioJsonUncheckedCreateWithoutUsuarioInput> | RelatorioJsonCreateWithoutUsuarioInput[] | RelatorioJsonUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RelatorioJsonCreateOrConnectWithoutUsuarioInput | RelatorioJsonCreateOrConnectWithoutUsuarioInput[]
    createMany?: RelatorioJsonCreateManyUsuarioInputEnvelope
    connect?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type TransacaoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput> | TransacaoCreateWithoutUsuarioInput[] | TransacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TransacaoCreateOrConnectWithoutUsuarioInput | TransacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: TransacaoUpsertWithWhereUniqueWithoutUsuarioInput | TransacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TransacaoCreateManyUsuarioInputEnvelope
    set?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    disconnect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    delete?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    connect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    update?: TransacaoUpdateWithWhereUniqueWithoutUsuarioInput | TransacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TransacaoUpdateManyWithWhereWithoutUsuarioInput | TransacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TransacaoScalarWhereInput | TransacaoScalarWhereInput[]
  }

  export type OrcamentoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<OrcamentoCreateWithoutUsuarioInput, OrcamentoUncheckedCreateWithoutUsuarioInput> | OrcamentoCreateWithoutUsuarioInput[] | OrcamentoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: OrcamentoCreateOrConnectWithoutUsuarioInput | OrcamentoCreateOrConnectWithoutUsuarioInput[]
    upsert?: OrcamentoUpsertWithWhereUniqueWithoutUsuarioInput | OrcamentoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: OrcamentoCreateManyUsuarioInputEnvelope
    set?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    disconnect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    delete?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    connect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    update?: OrcamentoUpdateWithWhereUniqueWithoutUsuarioInput | OrcamentoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: OrcamentoUpdateManyWithWhereWithoutUsuarioInput | OrcamentoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: OrcamentoScalarWhereInput | OrcamentoScalarWhereInput[]
  }

  export type RelatorioUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RelatorioCreateWithoutUsuarioInput, RelatorioUncheckedCreateWithoutUsuarioInput> | RelatorioCreateWithoutUsuarioInput[] | RelatorioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RelatorioCreateOrConnectWithoutUsuarioInput | RelatorioCreateOrConnectWithoutUsuarioInput[]
    upsert?: RelatorioUpsertWithWhereUniqueWithoutUsuarioInput | RelatorioUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RelatorioCreateManyUsuarioInputEnvelope
    set?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
    disconnect?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
    delete?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
    connect?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
    update?: RelatorioUpdateWithWhereUniqueWithoutUsuarioInput | RelatorioUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RelatorioUpdateManyWithWhereWithoutUsuarioInput | RelatorioUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RelatorioScalarWhereInput | RelatorioScalarWhereInput[]
  }

  export type RelatorioJsonUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RelatorioJsonCreateWithoutUsuarioInput, RelatorioJsonUncheckedCreateWithoutUsuarioInput> | RelatorioJsonCreateWithoutUsuarioInput[] | RelatorioJsonUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RelatorioJsonCreateOrConnectWithoutUsuarioInput | RelatorioJsonCreateOrConnectWithoutUsuarioInput[]
    upsert?: RelatorioJsonUpsertWithWhereUniqueWithoutUsuarioInput | RelatorioJsonUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RelatorioJsonCreateManyUsuarioInputEnvelope
    set?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
    disconnect?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
    delete?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
    connect?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
    update?: RelatorioJsonUpdateWithWhereUniqueWithoutUsuarioInput | RelatorioJsonUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RelatorioJsonUpdateManyWithWhereWithoutUsuarioInput | RelatorioJsonUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RelatorioJsonScalarWhereInput | RelatorioJsonScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput> | TransacaoCreateWithoutUsuarioInput[] | TransacaoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: TransacaoCreateOrConnectWithoutUsuarioInput | TransacaoCreateOrConnectWithoutUsuarioInput[]
    upsert?: TransacaoUpsertWithWhereUniqueWithoutUsuarioInput | TransacaoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: TransacaoCreateManyUsuarioInputEnvelope
    set?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    disconnect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    delete?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    connect?: TransacaoWhereUniqueInput | TransacaoWhereUniqueInput[]
    update?: TransacaoUpdateWithWhereUniqueWithoutUsuarioInput | TransacaoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: TransacaoUpdateManyWithWhereWithoutUsuarioInput | TransacaoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: TransacaoScalarWhereInput | TransacaoScalarWhereInput[]
  }

  export type OrcamentoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<OrcamentoCreateWithoutUsuarioInput, OrcamentoUncheckedCreateWithoutUsuarioInput> | OrcamentoCreateWithoutUsuarioInput[] | OrcamentoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: OrcamentoCreateOrConnectWithoutUsuarioInput | OrcamentoCreateOrConnectWithoutUsuarioInput[]
    upsert?: OrcamentoUpsertWithWhereUniqueWithoutUsuarioInput | OrcamentoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: OrcamentoCreateManyUsuarioInputEnvelope
    set?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    disconnect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    delete?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    connect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    update?: OrcamentoUpdateWithWhereUniqueWithoutUsuarioInput | OrcamentoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: OrcamentoUpdateManyWithWhereWithoutUsuarioInput | OrcamentoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: OrcamentoScalarWhereInput | OrcamentoScalarWhereInput[]
  }

  export type RelatorioUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RelatorioCreateWithoutUsuarioInput, RelatorioUncheckedCreateWithoutUsuarioInput> | RelatorioCreateWithoutUsuarioInput[] | RelatorioUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RelatorioCreateOrConnectWithoutUsuarioInput | RelatorioCreateOrConnectWithoutUsuarioInput[]
    upsert?: RelatorioUpsertWithWhereUniqueWithoutUsuarioInput | RelatorioUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RelatorioCreateManyUsuarioInputEnvelope
    set?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
    disconnect?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
    delete?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
    connect?: RelatorioWhereUniqueInput | RelatorioWhereUniqueInput[]
    update?: RelatorioUpdateWithWhereUniqueWithoutUsuarioInput | RelatorioUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RelatorioUpdateManyWithWhereWithoutUsuarioInput | RelatorioUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RelatorioScalarWhereInput | RelatorioScalarWhereInput[]
  }

  export type RelatorioJsonUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RelatorioJsonCreateWithoutUsuarioInput, RelatorioJsonUncheckedCreateWithoutUsuarioInput> | RelatorioJsonCreateWithoutUsuarioInput[] | RelatorioJsonUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RelatorioJsonCreateOrConnectWithoutUsuarioInput | RelatorioJsonCreateOrConnectWithoutUsuarioInput[]
    upsert?: RelatorioJsonUpsertWithWhereUniqueWithoutUsuarioInput | RelatorioJsonUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RelatorioJsonCreateManyUsuarioInputEnvelope
    set?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
    disconnect?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
    delete?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
    connect?: RelatorioJsonWhereUniqueInput | RelatorioJsonWhereUniqueInput[]
    update?: RelatorioJsonUpdateWithWhereUniqueWithoutUsuarioInput | RelatorioJsonUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RelatorioJsonUpdateManyWithWhereWithoutUsuarioInput | RelatorioJsonUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RelatorioJsonScalarWhereInput | RelatorioJsonScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutTransacoesInput = {
    create?: XOR<UsuarioCreateWithoutTransacoesInput, UsuarioUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTransacoesInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumCategoriaEnumFieldUpdateOperationsInput = {
    set?: $Enums.CategoriaEnum
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UsuarioUpdateOneRequiredWithoutTransacoesNestedInput = {
    create?: XOR<UsuarioCreateWithoutTransacoesInput, UsuarioUncheckedCreateWithoutTransacoesInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutTransacoesInput
    upsert?: UsuarioUpsertWithoutTransacoesInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutTransacoesInput, UsuarioUpdateWithoutTransacoesInput>, UsuarioUncheckedUpdateWithoutTransacoesInput>
  }

  export type SubcategoriaCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<SubcategoriaCreateWithoutCategoriaInput, SubcategoriaUncheckedCreateWithoutCategoriaInput> | SubcategoriaCreateWithoutCategoriaInput[] | SubcategoriaUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: SubcategoriaCreateOrConnectWithoutCategoriaInput | SubcategoriaCreateOrConnectWithoutCategoriaInput[]
    createMany?: SubcategoriaCreateManyCategoriaInputEnvelope
    connect?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
  }

  export type OrcamentoCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<OrcamentoCreateWithoutCategoriaInput, OrcamentoUncheckedCreateWithoutCategoriaInput> | OrcamentoCreateWithoutCategoriaInput[] | OrcamentoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: OrcamentoCreateOrConnectWithoutCategoriaInput | OrcamentoCreateOrConnectWithoutCategoriaInput[]
    createMany?: OrcamentoCreateManyCategoriaInputEnvelope
    connect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
  }

  export type SubcategoriaUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<SubcategoriaCreateWithoutCategoriaInput, SubcategoriaUncheckedCreateWithoutCategoriaInput> | SubcategoriaCreateWithoutCategoriaInput[] | SubcategoriaUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: SubcategoriaCreateOrConnectWithoutCategoriaInput | SubcategoriaCreateOrConnectWithoutCategoriaInput[]
    createMany?: SubcategoriaCreateManyCategoriaInputEnvelope
    connect?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
  }

  export type OrcamentoUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<OrcamentoCreateWithoutCategoriaInput, OrcamentoUncheckedCreateWithoutCategoriaInput> | OrcamentoCreateWithoutCategoriaInput[] | OrcamentoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: OrcamentoCreateOrConnectWithoutCategoriaInput | OrcamentoCreateOrConnectWithoutCategoriaInput[]
    createMany?: OrcamentoCreateManyCategoriaInputEnvelope
    connect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
  }

  export type EnumTipoCategoriaEnumFieldUpdateOperationsInput = {
    set?: $Enums.TipoCategoriaEnum
  }

  export type SubcategoriaUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<SubcategoriaCreateWithoutCategoriaInput, SubcategoriaUncheckedCreateWithoutCategoriaInput> | SubcategoriaCreateWithoutCategoriaInput[] | SubcategoriaUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: SubcategoriaCreateOrConnectWithoutCategoriaInput | SubcategoriaCreateOrConnectWithoutCategoriaInput[]
    upsert?: SubcategoriaUpsertWithWhereUniqueWithoutCategoriaInput | SubcategoriaUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: SubcategoriaCreateManyCategoriaInputEnvelope
    set?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
    disconnect?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
    delete?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
    connect?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
    update?: SubcategoriaUpdateWithWhereUniqueWithoutCategoriaInput | SubcategoriaUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: SubcategoriaUpdateManyWithWhereWithoutCategoriaInput | SubcategoriaUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: SubcategoriaScalarWhereInput | SubcategoriaScalarWhereInput[]
  }

  export type OrcamentoUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<OrcamentoCreateWithoutCategoriaInput, OrcamentoUncheckedCreateWithoutCategoriaInput> | OrcamentoCreateWithoutCategoriaInput[] | OrcamentoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: OrcamentoCreateOrConnectWithoutCategoriaInput | OrcamentoCreateOrConnectWithoutCategoriaInput[]
    upsert?: OrcamentoUpsertWithWhereUniqueWithoutCategoriaInput | OrcamentoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: OrcamentoCreateManyCategoriaInputEnvelope
    set?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    disconnect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    delete?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    connect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    update?: OrcamentoUpdateWithWhereUniqueWithoutCategoriaInput | OrcamentoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: OrcamentoUpdateManyWithWhereWithoutCategoriaInput | OrcamentoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: OrcamentoScalarWhereInput | OrcamentoScalarWhereInput[]
  }

  export type SubcategoriaUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<SubcategoriaCreateWithoutCategoriaInput, SubcategoriaUncheckedCreateWithoutCategoriaInput> | SubcategoriaCreateWithoutCategoriaInput[] | SubcategoriaUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: SubcategoriaCreateOrConnectWithoutCategoriaInput | SubcategoriaCreateOrConnectWithoutCategoriaInput[]
    upsert?: SubcategoriaUpsertWithWhereUniqueWithoutCategoriaInput | SubcategoriaUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: SubcategoriaCreateManyCategoriaInputEnvelope
    set?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
    disconnect?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
    delete?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
    connect?: SubcategoriaWhereUniqueInput | SubcategoriaWhereUniqueInput[]
    update?: SubcategoriaUpdateWithWhereUniqueWithoutCategoriaInput | SubcategoriaUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: SubcategoriaUpdateManyWithWhereWithoutCategoriaInput | SubcategoriaUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: SubcategoriaScalarWhereInput | SubcategoriaScalarWhereInput[]
  }

  export type OrcamentoUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<OrcamentoCreateWithoutCategoriaInput, OrcamentoUncheckedCreateWithoutCategoriaInput> | OrcamentoCreateWithoutCategoriaInput[] | OrcamentoUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: OrcamentoCreateOrConnectWithoutCategoriaInput | OrcamentoCreateOrConnectWithoutCategoriaInput[]
    upsert?: OrcamentoUpsertWithWhereUniqueWithoutCategoriaInput | OrcamentoUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: OrcamentoCreateManyCategoriaInputEnvelope
    set?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    disconnect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    delete?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    connect?: OrcamentoWhereUniqueInput | OrcamentoWhereUniqueInput[]
    update?: OrcamentoUpdateWithWhereUniqueWithoutCategoriaInput | OrcamentoUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: OrcamentoUpdateManyWithWhereWithoutCategoriaInput | OrcamentoUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: OrcamentoScalarWhereInput | OrcamentoScalarWhereInput[]
  }

  export type CategoriaCreateNestedOneWithoutSubcategoriasInput = {
    create?: XOR<CategoriaCreateWithoutSubcategoriasInput, CategoriaUncheckedCreateWithoutSubcategoriasInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutSubcategoriasInput
    connect?: CategoriaWhereUniqueInput
  }

  export type CategoriaUpdateOneRequiredWithoutSubcategoriasNestedInput = {
    create?: XOR<CategoriaCreateWithoutSubcategoriasInput, CategoriaUncheckedCreateWithoutSubcategoriasInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutSubcategoriasInput
    upsert?: CategoriaUpsertWithoutSubcategoriasInput
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutSubcategoriasInput, CategoriaUpdateWithoutSubcategoriasInput>, CategoriaUncheckedUpdateWithoutSubcategoriasInput>
  }

  export type UsuarioCreateNestedOneWithoutOrcamentosInput = {
    create?: XOR<UsuarioCreateWithoutOrcamentosInput, UsuarioUncheckedCreateWithoutOrcamentosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutOrcamentosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type CategoriaCreateNestedOneWithoutOrcamentosInput = {
    create?: XOR<CategoriaCreateWithoutOrcamentosInput, CategoriaUncheckedCreateWithoutOrcamentosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutOrcamentosInput
    connect?: CategoriaWhereUniqueInput
  }

  export type HistoricoOrcamentoCreateNestedManyWithoutOrcamentoInput = {
    create?: XOR<HistoricoOrcamentoCreateWithoutOrcamentoInput, HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput> | HistoricoOrcamentoCreateWithoutOrcamentoInput[] | HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput[]
    connectOrCreate?: HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput | HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput[]
    createMany?: HistoricoOrcamentoCreateManyOrcamentoInputEnvelope
    connect?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
  }

  export type HistoricoOrcamentoUncheckedCreateNestedManyWithoutOrcamentoInput = {
    create?: XOR<HistoricoOrcamentoCreateWithoutOrcamentoInput, HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput> | HistoricoOrcamentoCreateWithoutOrcamentoInput[] | HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput[]
    connectOrCreate?: HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput | HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput[]
    createMany?: HistoricoOrcamentoCreateManyOrcamentoInputEnvelope
    connect?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
  }

  export type UsuarioUpdateOneRequiredWithoutOrcamentosNestedInput = {
    create?: XOR<UsuarioCreateWithoutOrcamentosInput, UsuarioUncheckedCreateWithoutOrcamentosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutOrcamentosInput
    upsert?: UsuarioUpsertWithoutOrcamentosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutOrcamentosInput, UsuarioUpdateWithoutOrcamentosInput>, UsuarioUncheckedUpdateWithoutOrcamentosInput>
  }

  export type CategoriaUpdateOneRequiredWithoutOrcamentosNestedInput = {
    create?: XOR<CategoriaCreateWithoutOrcamentosInput, CategoriaUncheckedCreateWithoutOrcamentosInput>
    connectOrCreate?: CategoriaCreateOrConnectWithoutOrcamentosInput
    upsert?: CategoriaUpsertWithoutOrcamentosInput
    connect?: CategoriaWhereUniqueInput
    update?: XOR<XOR<CategoriaUpdateToOneWithWhereWithoutOrcamentosInput, CategoriaUpdateWithoutOrcamentosInput>, CategoriaUncheckedUpdateWithoutOrcamentosInput>
  }

  export type HistoricoOrcamentoUpdateManyWithoutOrcamentoNestedInput = {
    create?: XOR<HistoricoOrcamentoCreateWithoutOrcamentoInput, HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput> | HistoricoOrcamentoCreateWithoutOrcamentoInput[] | HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput[]
    connectOrCreate?: HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput | HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput[]
    upsert?: HistoricoOrcamentoUpsertWithWhereUniqueWithoutOrcamentoInput | HistoricoOrcamentoUpsertWithWhereUniqueWithoutOrcamentoInput[]
    createMany?: HistoricoOrcamentoCreateManyOrcamentoInputEnvelope
    set?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
    disconnect?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
    delete?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
    connect?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
    update?: HistoricoOrcamentoUpdateWithWhereUniqueWithoutOrcamentoInput | HistoricoOrcamentoUpdateWithWhereUniqueWithoutOrcamentoInput[]
    updateMany?: HistoricoOrcamentoUpdateManyWithWhereWithoutOrcamentoInput | HistoricoOrcamentoUpdateManyWithWhereWithoutOrcamentoInput[]
    deleteMany?: HistoricoOrcamentoScalarWhereInput | HistoricoOrcamentoScalarWhereInput[]
  }

  export type HistoricoOrcamentoUncheckedUpdateManyWithoutOrcamentoNestedInput = {
    create?: XOR<HistoricoOrcamentoCreateWithoutOrcamentoInput, HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput> | HistoricoOrcamentoCreateWithoutOrcamentoInput[] | HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput[]
    connectOrCreate?: HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput | HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput[]
    upsert?: HistoricoOrcamentoUpsertWithWhereUniqueWithoutOrcamentoInput | HistoricoOrcamentoUpsertWithWhereUniqueWithoutOrcamentoInput[]
    createMany?: HistoricoOrcamentoCreateManyOrcamentoInputEnvelope
    set?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
    disconnect?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
    delete?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
    connect?: HistoricoOrcamentoWhereUniqueInput | HistoricoOrcamentoWhereUniqueInput[]
    update?: HistoricoOrcamentoUpdateWithWhereUniqueWithoutOrcamentoInput | HistoricoOrcamentoUpdateWithWhereUniqueWithoutOrcamentoInput[]
    updateMany?: HistoricoOrcamentoUpdateManyWithWhereWithoutOrcamentoInput | HistoricoOrcamentoUpdateManyWithWhereWithoutOrcamentoInput[]
    deleteMany?: HistoricoOrcamentoScalarWhereInput | HistoricoOrcamentoScalarWhereInput[]
  }

  export type OrcamentoCreateNestedOneWithoutHistoricoOrcamentosInput = {
    create?: XOR<OrcamentoCreateWithoutHistoricoOrcamentosInput, OrcamentoUncheckedCreateWithoutHistoricoOrcamentosInput>
    connectOrCreate?: OrcamentoCreateOrConnectWithoutHistoricoOrcamentosInput
    connect?: OrcamentoWhereUniqueInput
  }

  export type EnumStatusEnumFieldUpdateOperationsInput = {
    set?: $Enums.StatusEnum
  }

  export type EnumTipoAjusteEnumFieldUpdateOperationsInput = {
    set?: $Enums.TipoAjusteEnum
  }

  export type OrcamentoUpdateOneRequiredWithoutHistoricoOrcamentosNestedInput = {
    create?: XOR<OrcamentoCreateWithoutHistoricoOrcamentosInput, OrcamentoUncheckedCreateWithoutHistoricoOrcamentosInput>
    connectOrCreate?: OrcamentoCreateOrConnectWithoutHistoricoOrcamentosInput
    upsert?: OrcamentoUpsertWithoutHistoricoOrcamentosInput
    connect?: OrcamentoWhereUniqueInput
    update?: XOR<XOR<OrcamentoUpdateToOneWithWhereWithoutHistoricoOrcamentosInput, OrcamentoUpdateWithoutHistoricoOrcamentosInput>, OrcamentoUncheckedUpdateWithoutHistoricoOrcamentosInput>
  }

  export type UsuarioCreateNestedOneWithoutRelatoriosInput = {
    create?: XOR<UsuarioCreateWithoutRelatoriosInput, UsuarioUncheckedCreateWithoutRelatoriosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRelatoriosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EnumTipoRelatorioEnumFieldUpdateOperationsInput = {
    set?: $Enums.TipoRelatorioEnum
  }

  export type UsuarioUpdateOneRequiredWithoutRelatoriosNestedInput = {
    create?: XOR<UsuarioCreateWithoutRelatoriosInput, UsuarioUncheckedCreateWithoutRelatoriosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRelatoriosInput
    upsert?: UsuarioUpsertWithoutRelatoriosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutRelatoriosInput, UsuarioUpdateWithoutRelatoriosInput>, UsuarioUncheckedUpdateWithoutRelatoriosInput>
  }

  export type UsuarioCreateNestedOneWithoutRelatoriosJsonInput = {
    create?: XOR<UsuarioCreateWithoutRelatoriosJsonInput, UsuarioUncheckedCreateWithoutRelatoriosJsonInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRelatoriosJsonInput
    connect?: UsuarioWhereUniqueInput
  }

  export type EnumTipoRelatorioJsonEnumFieldUpdateOperationsInput = {
    set?: $Enums.TipoRelatorioJsonEnum
  }

  export type UsuarioUpdateOneRequiredWithoutRelatoriosJsonNestedInput = {
    create?: XOR<UsuarioCreateWithoutRelatoriosJsonInput, UsuarioUncheckedCreateWithoutRelatoriosJsonInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRelatoriosJsonInput
    upsert?: UsuarioUpsertWithoutRelatoriosJsonInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutRelatoriosJsonInput, UsuarioUpdateWithoutRelatoriosJsonInput>, UsuarioUncheckedUpdateWithoutRelatoriosJsonInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumCategoriaEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoriaEnum | EnumCategoriaEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CategoriaEnum[]
    notIn?: $Enums.CategoriaEnum[]
    not?: NestedEnumCategoriaEnumFilter<$PrismaModel> | $Enums.CategoriaEnum
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumCategoriaEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoriaEnum | EnumCategoriaEnumFieldRefInput<$PrismaModel>
    in?: $Enums.CategoriaEnum[]
    notIn?: $Enums.CategoriaEnum[]
    not?: NestedEnumCategoriaEnumWithAggregatesFilter<$PrismaModel> | $Enums.CategoriaEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoriaEnumFilter<$PrismaModel>
    _max?: NestedEnumCategoriaEnumFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTipoCategoriaEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCategoriaEnum | EnumTipoCategoriaEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCategoriaEnum[]
    notIn?: $Enums.TipoCategoriaEnum[]
    not?: NestedEnumTipoCategoriaEnumFilter<$PrismaModel> | $Enums.TipoCategoriaEnum
  }

  export type NestedEnumTipoCategoriaEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCategoriaEnum | EnumTipoCategoriaEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCategoriaEnum[]
    notIn?: $Enums.TipoCategoriaEnum[]
    not?: NestedEnumTipoCategoriaEnumWithAggregatesFilter<$PrismaModel> | $Enums.TipoCategoriaEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoCategoriaEnumFilter<$PrismaModel>
    _max?: NestedEnumTipoCategoriaEnumFilter<$PrismaModel>
  }

  export type NestedEnumStatusEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEnum | EnumStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEnum[]
    notIn?: $Enums.StatusEnum[]
    not?: NestedEnumStatusEnumFilter<$PrismaModel> | $Enums.StatusEnum
  }

  export type NestedEnumTipoAjusteEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoAjusteEnum | EnumTipoAjusteEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoAjusteEnum[]
    notIn?: $Enums.TipoAjusteEnum[]
    not?: NestedEnumTipoAjusteEnumFilter<$PrismaModel> | $Enums.TipoAjusteEnum
  }

  export type NestedEnumStatusEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusEnum | EnumStatusEnumFieldRefInput<$PrismaModel>
    in?: $Enums.StatusEnum[]
    notIn?: $Enums.StatusEnum[]
    not?: NestedEnumStatusEnumWithAggregatesFilter<$PrismaModel> | $Enums.StatusEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusEnumFilter<$PrismaModel>
    _max?: NestedEnumStatusEnumFilter<$PrismaModel>
  }

  export type NestedEnumTipoAjusteEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoAjusteEnum | EnumTipoAjusteEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoAjusteEnum[]
    notIn?: $Enums.TipoAjusteEnum[]
    not?: NestedEnumTipoAjusteEnumWithAggregatesFilter<$PrismaModel> | $Enums.TipoAjusteEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoAjusteEnumFilter<$PrismaModel>
    _max?: NestedEnumTipoAjusteEnumFilter<$PrismaModel>
  }

  export type NestedEnumTipoRelatorioEnumFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoRelatorioEnum | EnumTipoRelatorioEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoRelatorioEnum[]
    notIn?: $Enums.TipoRelatorioEnum[]
    not?: NestedEnumTipoRelatorioEnumFilter<$PrismaModel> | $Enums.TipoRelatorioEnum
  }

  export type NestedEnumTipoRelatorioEnumWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoRelatorioEnum | EnumTipoRelatorioEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoRelatorioEnum[]
    notIn?: $Enums.TipoRelatorioEnum[]
    not?: NestedEnumTipoRelatorioEnumWithAggregatesFilter<$PrismaModel> | $Enums.TipoRelatorioEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoRelatorioEnumFilter<$PrismaModel>
    _max?: NestedEnumTipoRelatorioEnumFilter<$PrismaModel>
  }
  export type NestedEnumTipoRelatorioJsonEnumFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedEnumTipoRelatorioJsonEnumFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedEnumTipoRelatorioJsonEnumFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedEnumTipoRelatorioJsonEnumFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedEnumTipoRelatorioJsonEnumFilterBase<$PrismaModel>>, 'path'>>

  export type NestedEnumTipoRelatorioJsonEnumFilterBase<$PrismaModel = never> = {
    equals?: $Enums.TipoRelatorioJsonEnum | EnumTipoRelatorioJsonEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoRelatorioJsonEnum[]
    notIn?: $Enums.TipoRelatorioJsonEnum[]
    not?: NestedEnumTipoRelatorioJsonEnumFilter<$PrismaModel> | $Enums.TipoRelatorioJsonEnum
  }
  export type NestedEnumTipoRelatorioJsonEnumWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedEnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedEnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedEnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedEnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type NestedEnumTipoRelatorioJsonEnumWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: $Enums.TipoRelatorioJsonEnum | EnumTipoRelatorioJsonEnumFieldRefInput<$PrismaModel>
    in?: $Enums.TipoRelatorioJsonEnum[]
    notIn?: $Enums.TipoRelatorioJsonEnum[]
    not?: NestedEnumTipoRelatorioJsonEnumWithAggregatesFilter<$PrismaModel> | $Enums.TipoRelatorioJsonEnum
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoRelatorioJsonEnumFilter<$PrismaModel>
    _max?: NestedEnumTipoRelatorioJsonEnumFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TransacaoCreateWithoutUsuarioInput = {
    data: Date | string
    descricao: string
    categoria: $Enums.CategoriaEnum
    valor: number
    tags?: string | null
  }

  export type TransacaoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    data: Date | string
    descricao: string
    categoria: $Enums.CategoriaEnum
    valor: number
    tags?: string | null
  }

  export type TransacaoCreateOrConnectWithoutUsuarioInput = {
    where: TransacaoWhereUniqueInput
    create: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type TransacaoCreateManyUsuarioInputEnvelope = {
    data: TransacaoCreateManyUsuarioInput | TransacaoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type OrcamentoCreateWithoutUsuarioInput = {
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
    categoria: CategoriaCreateNestedOneWithoutOrcamentosInput
    historicoOrcamentos?: HistoricoOrcamentoCreateNestedManyWithoutOrcamentoInput
  }

  export type OrcamentoUncheckedCreateWithoutUsuarioInput = {
    id?: number
    categoriaId: number
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
    historicoOrcamentos?: HistoricoOrcamentoUncheckedCreateNestedManyWithoutOrcamentoInput
  }

  export type OrcamentoCreateOrConnectWithoutUsuarioInput = {
    where: OrcamentoWhereUniqueInput
    create: XOR<OrcamentoCreateWithoutUsuarioInput, OrcamentoUncheckedCreateWithoutUsuarioInput>
  }

  export type OrcamentoCreateManyUsuarioInputEnvelope = {
    data: OrcamentoCreateManyUsuarioInput | OrcamentoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type RelatorioCreateWithoutUsuarioInput = {
    tipo: $Enums.TipoRelatorioEnum
    dataInicio: Date | string
    dataFim: Date | string
    relatorio: string
    formato?: string | null
  }

  export type RelatorioUncheckedCreateWithoutUsuarioInput = {
    id?: number
    tipo: $Enums.TipoRelatorioEnum
    dataInicio: Date | string
    dataFim: Date | string
    relatorio: string
    formato?: string | null
  }

  export type RelatorioCreateOrConnectWithoutUsuarioInput = {
    where: RelatorioWhereUniqueInput
    create: XOR<RelatorioCreateWithoutUsuarioInput, RelatorioUncheckedCreateWithoutUsuarioInput>
  }

  export type RelatorioCreateManyUsuarioInputEnvelope = {
    data: RelatorioCreateManyUsuarioInput | RelatorioCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type RelatorioJsonCreateWithoutUsuarioInput = {
    tipo: $Enums.TipoRelatorioJsonEnum
    dataInicio: Date | string
    dataFim: Date | string
    dados: JsonNullValueInput | InputJsonValue
  }

  export type RelatorioJsonUncheckedCreateWithoutUsuarioInput = {
    id?: number
    tipo: $Enums.TipoRelatorioJsonEnum
    dataInicio: Date | string
    dataFim: Date | string
    dados: JsonNullValueInput | InputJsonValue
  }

  export type RelatorioJsonCreateOrConnectWithoutUsuarioInput = {
    where: RelatorioJsonWhereUniqueInput
    create: XOR<RelatorioJsonCreateWithoutUsuarioInput, RelatorioJsonUncheckedCreateWithoutUsuarioInput>
  }

  export type RelatorioJsonCreateManyUsuarioInputEnvelope = {
    data: RelatorioJsonCreateManyUsuarioInput | RelatorioJsonCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type TransacaoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: TransacaoWhereUniqueInput
    update: XOR<TransacaoUpdateWithoutUsuarioInput, TransacaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<TransacaoCreateWithoutUsuarioInput, TransacaoUncheckedCreateWithoutUsuarioInput>
  }

  export type TransacaoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: TransacaoWhereUniqueInput
    data: XOR<TransacaoUpdateWithoutUsuarioInput, TransacaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type TransacaoUpdateManyWithWhereWithoutUsuarioInput = {
    where: TransacaoScalarWhereInput
    data: XOR<TransacaoUpdateManyMutationInput, TransacaoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type TransacaoScalarWhereInput = {
    AND?: TransacaoScalarWhereInput | TransacaoScalarWhereInput[]
    OR?: TransacaoScalarWhereInput[]
    NOT?: TransacaoScalarWhereInput | TransacaoScalarWhereInput[]
    id?: IntFilter<"Transacao"> | number
    usuarioId?: IntFilter<"Transacao"> | number
    data?: DateTimeFilter<"Transacao"> | Date | string
    descricao?: StringFilter<"Transacao"> | string
    categoria?: EnumCategoriaEnumFilter<"Transacao"> | $Enums.CategoriaEnum
    valor?: FloatFilter<"Transacao"> | number
    tags?: StringNullableFilter<"Transacao"> | string | null
  }

  export type OrcamentoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: OrcamentoWhereUniqueInput
    update: XOR<OrcamentoUpdateWithoutUsuarioInput, OrcamentoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<OrcamentoCreateWithoutUsuarioInput, OrcamentoUncheckedCreateWithoutUsuarioInput>
  }

  export type OrcamentoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: OrcamentoWhereUniqueInput
    data: XOR<OrcamentoUpdateWithoutUsuarioInput, OrcamentoUncheckedUpdateWithoutUsuarioInput>
  }

  export type OrcamentoUpdateManyWithWhereWithoutUsuarioInput = {
    where: OrcamentoScalarWhereInput
    data: XOR<OrcamentoUpdateManyMutationInput, OrcamentoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type OrcamentoScalarWhereInput = {
    AND?: OrcamentoScalarWhereInput | OrcamentoScalarWhereInput[]
    OR?: OrcamentoScalarWhereInput[]
    NOT?: OrcamentoScalarWhereInput | OrcamentoScalarWhereInput[]
    id?: IntFilter<"Orcamento"> | number
    usuarioId?: IntFilter<"Orcamento"> | number
    categoriaId?: IntFilter<"Orcamento"> | number
    valor?: FloatFilter<"Orcamento"> | number
    dataInicio?: DateTimeFilter<"Orcamento"> | Date | string
    dataFim?: DateTimeFilter<"Orcamento"> | Date | string
  }

  export type RelatorioUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RelatorioWhereUniqueInput
    update: XOR<RelatorioUpdateWithoutUsuarioInput, RelatorioUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RelatorioCreateWithoutUsuarioInput, RelatorioUncheckedCreateWithoutUsuarioInput>
  }

  export type RelatorioUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RelatorioWhereUniqueInput
    data: XOR<RelatorioUpdateWithoutUsuarioInput, RelatorioUncheckedUpdateWithoutUsuarioInput>
  }

  export type RelatorioUpdateManyWithWhereWithoutUsuarioInput = {
    where: RelatorioScalarWhereInput
    data: XOR<RelatorioUpdateManyMutationInput, RelatorioUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type RelatorioScalarWhereInput = {
    AND?: RelatorioScalarWhereInput | RelatorioScalarWhereInput[]
    OR?: RelatorioScalarWhereInput[]
    NOT?: RelatorioScalarWhereInput | RelatorioScalarWhereInput[]
    id?: IntFilter<"Relatorio"> | number
    usuarioId?: IntFilter<"Relatorio"> | number
    tipo?: EnumTipoRelatorioEnumFilter<"Relatorio"> | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFilter<"Relatorio"> | Date | string
    dataFim?: DateTimeFilter<"Relatorio"> | Date | string
    relatorio?: StringFilter<"Relatorio"> | string
    formato?: StringNullableFilter<"Relatorio"> | string | null
  }

  export type RelatorioJsonUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RelatorioJsonWhereUniqueInput
    update: XOR<RelatorioJsonUpdateWithoutUsuarioInput, RelatorioJsonUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RelatorioJsonCreateWithoutUsuarioInput, RelatorioJsonUncheckedCreateWithoutUsuarioInput>
  }

  export type RelatorioJsonUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RelatorioJsonWhereUniqueInput
    data: XOR<RelatorioJsonUpdateWithoutUsuarioInput, RelatorioJsonUncheckedUpdateWithoutUsuarioInput>
  }

  export type RelatorioJsonUpdateManyWithWhereWithoutUsuarioInput = {
    where: RelatorioJsonScalarWhereInput
    data: XOR<RelatorioJsonUpdateManyMutationInput, RelatorioJsonUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type RelatorioJsonScalarWhereInput = {
    AND?: RelatorioJsonScalarWhereInput | RelatorioJsonScalarWhereInput[]
    OR?: RelatorioJsonScalarWhereInput[]
    NOT?: RelatorioJsonScalarWhereInput | RelatorioJsonScalarWhereInput[]
    id?: IntFilter<"RelatorioJson"> | number
    usuarioId?: IntFilter<"RelatorioJson"> | number
    tipo?: EnumTipoRelatorioJsonEnumFilter<"RelatorioJson"> | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFilter<"RelatorioJson"> | Date | string
    dataFim?: DateTimeFilter<"RelatorioJson"> | Date | string
    dados?: JsonFilter<"RelatorioJson">
  }

  export type UsuarioCreateWithoutTransacoesInput = {
    nome: string
    email: string
    senha: string
    orcamentos?: OrcamentoCreateNestedManyWithoutUsuarioInput
    relatorios?: RelatorioCreateNestedManyWithoutUsuarioInput
    relatoriosJson?: RelatorioJsonCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutTransacoesInput = {
    id?: number
    nome: string
    email: string
    senha: string
    orcamentos?: OrcamentoUncheckedCreateNestedManyWithoutUsuarioInput
    relatorios?: RelatorioUncheckedCreateNestedManyWithoutUsuarioInput
    relatoriosJson?: RelatorioJsonUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutTransacoesInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutTransacoesInput, UsuarioUncheckedCreateWithoutTransacoesInput>
  }

  export type UsuarioUpsertWithoutTransacoesInput = {
    update: XOR<UsuarioUpdateWithoutTransacoesInput, UsuarioUncheckedUpdateWithoutTransacoesInput>
    create: XOR<UsuarioCreateWithoutTransacoesInput, UsuarioUncheckedCreateWithoutTransacoesInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutTransacoesInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutTransacoesInput, UsuarioUncheckedUpdateWithoutTransacoesInput>
  }

  export type UsuarioUpdateWithoutTransacoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    orcamentos?: OrcamentoUpdateManyWithoutUsuarioNestedInput
    relatorios?: RelatorioUpdateManyWithoutUsuarioNestedInput
    relatoriosJson?: RelatorioJsonUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutTransacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    orcamentos?: OrcamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    relatorios?: RelatorioUncheckedUpdateManyWithoutUsuarioNestedInput
    relatoriosJson?: RelatorioJsonUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type SubcategoriaCreateWithoutCategoriaInput = {
    nome: string
  }

  export type SubcategoriaUncheckedCreateWithoutCategoriaInput = {
    id?: number
    nome: string
  }

  export type SubcategoriaCreateOrConnectWithoutCategoriaInput = {
    where: SubcategoriaWhereUniqueInput
    create: XOR<SubcategoriaCreateWithoutCategoriaInput, SubcategoriaUncheckedCreateWithoutCategoriaInput>
  }

  export type SubcategoriaCreateManyCategoriaInputEnvelope = {
    data: SubcategoriaCreateManyCategoriaInput | SubcategoriaCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type OrcamentoCreateWithoutCategoriaInput = {
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
    usuario: UsuarioCreateNestedOneWithoutOrcamentosInput
    historicoOrcamentos?: HistoricoOrcamentoCreateNestedManyWithoutOrcamentoInput
  }

  export type OrcamentoUncheckedCreateWithoutCategoriaInput = {
    id?: number
    usuarioId: number
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
    historicoOrcamentos?: HistoricoOrcamentoUncheckedCreateNestedManyWithoutOrcamentoInput
  }

  export type OrcamentoCreateOrConnectWithoutCategoriaInput = {
    where: OrcamentoWhereUniqueInput
    create: XOR<OrcamentoCreateWithoutCategoriaInput, OrcamentoUncheckedCreateWithoutCategoriaInput>
  }

  export type OrcamentoCreateManyCategoriaInputEnvelope = {
    data: OrcamentoCreateManyCategoriaInput | OrcamentoCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type SubcategoriaUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: SubcategoriaWhereUniqueInput
    update: XOR<SubcategoriaUpdateWithoutCategoriaInput, SubcategoriaUncheckedUpdateWithoutCategoriaInput>
    create: XOR<SubcategoriaCreateWithoutCategoriaInput, SubcategoriaUncheckedCreateWithoutCategoriaInput>
  }

  export type SubcategoriaUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: SubcategoriaWhereUniqueInput
    data: XOR<SubcategoriaUpdateWithoutCategoriaInput, SubcategoriaUncheckedUpdateWithoutCategoriaInput>
  }

  export type SubcategoriaUpdateManyWithWhereWithoutCategoriaInput = {
    where: SubcategoriaScalarWhereInput
    data: XOR<SubcategoriaUpdateManyMutationInput, SubcategoriaUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type SubcategoriaScalarWhereInput = {
    AND?: SubcategoriaScalarWhereInput | SubcategoriaScalarWhereInput[]
    OR?: SubcategoriaScalarWhereInput[]
    NOT?: SubcategoriaScalarWhereInput | SubcategoriaScalarWhereInput[]
    id?: IntFilter<"Subcategoria"> | number
    categoriaId?: IntFilter<"Subcategoria"> | number
    nome?: StringFilter<"Subcategoria"> | string
  }

  export type OrcamentoUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: OrcamentoWhereUniqueInput
    update: XOR<OrcamentoUpdateWithoutCategoriaInput, OrcamentoUncheckedUpdateWithoutCategoriaInput>
    create: XOR<OrcamentoCreateWithoutCategoriaInput, OrcamentoUncheckedCreateWithoutCategoriaInput>
  }

  export type OrcamentoUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: OrcamentoWhereUniqueInput
    data: XOR<OrcamentoUpdateWithoutCategoriaInput, OrcamentoUncheckedUpdateWithoutCategoriaInput>
  }

  export type OrcamentoUpdateManyWithWhereWithoutCategoriaInput = {
    where: OrcamentoScalarWhereInput
    data: XOR<OrcamentoUpdateManyMutationInput, OrcamentoUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type CategoriaCreateWithoutSubcategoriasInput = {
    nome: string
    tipo: $Enums.TipoCategoriaEnum
    orcamentos?: OrcamentoCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateWithoutSubcategoriasInput = {
    id?: number
    nome: string
    tipo: $Enums.TipoCategoriaEnum
    orcamentos?: OrcamentoUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaCreateOrConnectWithoutSubcategoriasInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutSubcategoriasInput, CategoriaUncheckedCreateWithoutSubcategoriasInput>
  }

  export type CategoriaUpsertWithoutSubcategoriasInput = {
    update: XOR<CategoriaUpdateWithoutSubcategoriasInput, CategoriaUncheckedUpdateWithoutSubcategoriasInput>
    create: XOR<CategoriaCreateWithoutSubcategoriasInput, CategoriaUncheckedCreateWithoutSubcategoriasInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutSubcategoriasInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutSubcategoriasInput, CategoriaUncheckedUpdateWithoutSubcategoriasInput>
  }

  export type CategoriaUpdateWithoutSubcategoriasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoCategoriaEnumFieldUpdateOperationsInput | $Enums.TipoCategoriaEnum
    orcamentos?: OrcamentoUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateWithoutSubcategoriasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoCategoriaEnumFieldUpdateOperationsInput | $Enums.TipoCategoriaEnum
    orcamentos?: OrcamentoUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type UsuarioCreateWithoutOrcamentosInput = {
    nome: string
    email: string
    senha: string
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    relatorios?: RelatorioCreateNestedManyWithoutUsuarioInput
    relatoriosJson?: RelatorioJsonCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutOrcamentosInput = {
    id?: number
    nome: string
    email: string
    senha: string
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    relatorios?: RelatorioUncheckedCreateNestedManyWithoutUsuarioInput
    relatoriosJson?: RelatorioJsonUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutOrcamentosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutOrcamentosInput, UsuarioUncheckedCreateWithoutOrcamentosInput>
  }

  export type CategoriaCreateWithoutOrcamentosInput = {
    nome: string
    tipo: $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateWithoutOrcamentosInput = {
    id?: number
    nome: string
    tipo: $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoriaCreateOrConnectWithoutOrcamentosInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutOrcamentosInput, CategoriaUncheckedCreateWithoutOrcamentosInput>
  }

  export type HistoricoOrcamentoCreateWithoutOrcamentoInput = {
    data: Date | string
    valor: number
    status: $Enums.StatusEnum
    tipoAjuste: $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput = {
    id?: number
    data: Date | string
    valor: number
    status: $Enums.StatusEnum
    tipoAjuste: $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoCreateOrConnectWithoutOrcamentoInput = {
    where: HistoricoOrcamentoWhereUniqueInput
    create: XOR<HistoricoOrcamentoCreateWithoutOrcamentoInput, HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput>
  }

  export type HistoricoOrcamentoCreateManyOrcamentoInputEnvelope = {
    data: HistoricoOrcamentoCreateManyOrcamentoInput | HistoricoOrcamentoCreateManyOrcamentoInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutOrcamentosInput = {
    update: XOR<UsuarioUpdateWithoutOrcamentosInput, UsuarioUncheckedUpdateWithoutOrcamentosInput>
    create: XOR<UsuarioCreateWithoutOrcamentosInput, UsuarioUncheckedCreateWithoutOrcamentosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutOrcamentosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutOrcamentosInput, UsuarioUncheckedUpdateWithoutOrcamentosInput>
  }

  export type UsuarioUpdateWithoutOrcamentosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    relatorios?: RelatorioUpdateManyWithoutUsuarioNestedInput
    relatoriosJson?: RelatorioJsonUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutOrcamentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    relatorios?: RelatorioUncheckedUpdateManyWithoutUsuarioNestedInput
    relatoriosJson?: RelatorioJsonUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type CategoriaUpsertWithoutOrcamentosInput = {
    update: XOR<CategoriaUpdateWithoutOrcamentosInput, CategoriaUncheckedUpdateWithoutOrcamentosInput>
    create: XOR<CategoriaCreateWithoutOrcamentosInput, CategoriaUncheckedCreateWithoutOrcamentosInput>
    where?: CategoriaWhereInput
  }

  export type CategoriaUpdateToOneWithWhereWithoutOrcamentosInput = {
    where?: CategoriaWhereInput
    data: XOR<CategoriaUpdateWithoutOrcamentosInput, CategoriaUncheckedUpdateWithoutOrcamentosInput>
  }

  export type CategoriaUpdateWithoutOrcamentosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoCategoriaEnumFieldUpdateOperationsInput | $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateWithoutOrcamentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoCategoriaEnumFieldUpdateOperationsInput | $Enums.TipoCategoriaEnum
    subcategorias?: SubcategoriaUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type HistoricoOrcamentoUpsertWithWhereUniqueWithoutOrcamentoInput = {
    where: HistoricoOrcamentoWhereUniqueInput
    update: XOR<HistoricoOrcamentoUpdateWithoutOrcamentoInput, HistoricoOrcamentoUncheckedUpdateWithoutOrcamentoInput>
    create: XOR<HistoricoOrcamentoCreateWithoutOrcamentoInput, HistoricoOrcamentoUncheckedCreateWithoutOrcamentoInput>
  }

  export type HistoricoOrcamentoUpdateWithWhereUniqueWithoutOrcamentoInput = {
    where: HistoricoOrcamentoWhereUniqueInput
    data: XOR<HistoricoOrcamentoUpdateWithoutOrcamentoInput, HistoricoOrcamentoUncheckedUpdateWithoutOrcamentoInput>
  }

  export type HistoricoOrcamentoUpdateManyWithWhereWithoutOrcamentoInput = {
    where: HistoricoOrcamentoScalarWhereInput
    data: XOR<HistoricoOrcamentoUpdateManyMutationInput, HistoricoOrcamentoUncheckedUpdateManyWithoutOrcamentoInput>
  }

  export type HistoricoOrcamentoScalarWhereInput = {
    AND?: HistoricoOrcamentoScalarWhereInput | HistoricoOrcamentoScalarWhereInput[]
    OR?: HistoricoOrcamentoScalarWhereInput[]
    NOT?: HistoricoOrcamentoScalarWhereInput | HistoricoOrcamentoScalarWhereInput[]
    id?: IntFilter<"HistoricoOrcamento"> | number
    orcamentoId?: IntFilter<"HistoricoOrcamento"> | number
    data?: DateTimeFilter<"HistoricoOrcamento"> | Date | string
    valor?: FloatFilter<"HistoricoOrcamento"> | number
    status?: EnumStatusEnumFilter<"HistoricoOrcamento"> | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFilter<"HistoricoOrcamento"> | $Enums.TipoAjusteEnum
  }

  export type OrcamentoCreateWithoutHistoricoOrcamentosInput = {
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
    usuario: UsuarioCreateNestedOneWithoutOrcamentosInput
    categoria: CategoriaCreateNestedOneWithoutOrcamentosInput
  }

  export type OrcamentoUncheckedCreateWithoutHistoricoOrcamentosInput = {
    id?: number
    usuarioId: number
    categoriaId: number
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
  }

  export type OrcamentoCreateOrConnectWithoutHistoricoOrcamentosInput = {
    where: OrcamentoWhereUniqueInput
    create: XOR<OrcamentoCreateWithoutHistoricoOrcamentosInput, OrcamentoUncheckedCreateWithoutHistoricoOrcamentosInput>
  }

  export type OrcamentoUpsertWithoutHistoricoOrcamentosInput = {
    update: XOR<OrcamentoUpdateWithoutHistoricoOrcamentosInput, OrcamentoUncheckedUpdateWithoutHistoricoOrcamentosInput>
    create: XOR<OrcamentoCreateWithoutHistoricoOrcamentosInput, OrcamentoUncheckedCreateWithoutHistoricoOrcamentosInput>
    where?: OrcamentoWhereInput
  }

  export type OrcamentoUpdateToOneWithWhereWithoutHistoricoOrcamentosInput = {
    where?: OrcamentoWhereInput
    data: XOR<OrcamentoUpdateWithoutHistoricoOrcamentosInput, OrcamentoUncheckedUpdateWithoutHistoricoOrcamentosInput>
  }

  export type OrcamentoUpdateWithoutHistoricoOrcamentosInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutOrcamentosNestedInput
    categoria?: CategoriaUpdateOneRequiredWithoutOrcamentosNestedInput
  }

  export type OrcamentoUncheckedUpdateWithoutHistoricoOrcamentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateWithoutRelatoriosInput = {
    nome: string
    email: string
    senha: string
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    orcamentos?: OrcamentoCreateNestedManyWithoutUsuarioInput
    relatoriosJson?: RelatorioJsonCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutRelatoriosInput = {
    id?: number
    nome: string
    email: string
    senha: string
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    orcamentos?: OrcamentoUncheckedCreateNestedManyWithoutUsuarioInput
    relatoriosJson?: RelatorioJsonUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutRelatoriosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRelatoriosInput, UsuarioUncheckedCreateWithoutRelatoriosInput>
  }

  export type UsuarioUpsertWithoutRelatoriosInput = {
    update: XOR<UsuarioUpdateWithoutRelatoriosInput, UsuarioUncheckedUpdateWithoutRelatoriosInput>
    create: XOR<UsuarioCreateWithoutRelatoriosInput, UsuarioUncheckedCreateWithoutRelatoriosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutRelatoriosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutRelatoriosInput, UsuarioUncheckedUpdateWithoutRelatoriosInput>
  }

  export type UsuarioUpdateWithoutRelatoriosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    orcamentos?: OrcamentoUpdateManyWithoutUsuarioNestedInput
    relatoriosJson?: RelatorioJsonUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutRelatoriosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    orcamentos?: OrcamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    relatoriosJson?: RelatorioJsonUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateWithoutRelatoriosJsonInput = {
    nome: string
    email: string
    senha: string
    transacoes?: TransacaoCreateNestedManyWithoutUsuarioInput
    orcamentos?: OrcamentoCreateNestedManyWithoutUsuarioInput
    relatorios?: RelatorioCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutRelatoriosJsonInput = {
    id?: number
    nome: string
    email: string
    senha: string
    transacoes?: TransacaoUncheckedCreateNestedManyWithoutUsuarioInput
    orcamentos?: OrcamentoUncheckedCreateNestedManyWithoutUsuarioInput
    relatorios?: RelatorioUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutRelatoriosJsonInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRelatoriosJsonInput, UsuarioUncheckedCreateWithoutRelatoriosJsonInput>
  }

  export type UsuarioUpsertWithoutRelatoriosJsonInput = {
    update: XOR<UsuarioUpdateWithoutRelatoriosJsonInput, UsuarioUncheckedUpdateWithoutRelatoriosJsonInput>
    create: XOR<UsuarioCreateWithoutRelatoriosJsonInput, UsuarioUncheckedCreateWithoutRelatoriosJsonInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutRelatoriosJsonInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutRelatoriosJsonInput, UsuarioUncheckedUpdateWithoutRelatoriosJsonInput>
  }

  export type UsuarioUpdateWithoutRelatoriosJsonInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    transacoes?: TransacaoUpdateManyWithoutUsuarioNestedInput
    orcamentos?: OrcamentoUpdateManyWithoutUsuarioNestedInput
    relatorios?: RelatorioUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutRelatoriosJsonInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    transacoes?: TransacaoUncheckedUpdateManyWithoutUsuarioNestedInput
    orcamentos?: OrcamentoUncheckedUpdateManyWithoutUsuarioNestedInput
    relatorios?: RelatorioUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type TransacaoCreateManyUsuarioInput = {
    id?: number
    data: Date | string
    descricao: string
    categoria: $Enums.CategoriaEnum
    valor: number
    tags?: string | null
  }

  export type OrcamentoCreateManyUsuarioInput = {
    id?: number
    categoriaId: number
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
  }

  export type RelatorioCreateManyUsuarioInput = {
    id?: number
    tipo: $Enums.TipoRelatorioEnum
    dataInicio: Date | string
    dataFim: Date | string
    relatorio: string
    formato?: string | null
  }

  export type RelatorioJsonCreateManyUsuarioInput = {
    id?: number
    tipo: $Enums.TipoRelatorioJsonEnum
    dataInicio: Date | string
    dataFim: Date | string
    dados: JsonNullValueInput | InputJsonValue
  }

  export type TransacaoUpdateWithoutUsuarioInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaEnumFieldUpdateOperationsInput | $Enums.CategoriaEnum
    valor?: FloatFieldUpdateOperationsInput | number
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransacaoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaEnumFieldUpdateOperationsInput | $Enums.CategoriaEnum
    valor?: FloatFieldUpdateOperationsInput | number
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransacaoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    descricao?: StringFieldUpdateOperationsInput | string
    categoria?: EnumCategoriaEnumFieldUpdateOperationsInput | $Enums.CategoriaEnum
    valor?: FloatFieldUpdateOperationsInput | number
    tags?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrcamentoUpdateWithoutUsuarioInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    categoria?: CategoriaUpdateOneRequiredWithoutOrcamentosNestedInput
    historicoOrcamentos?: HistoricoOrcamentoUpdateManyWithoutOrcamentoNestedInput
  }

  export type OrcamentoUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    historicoOrcamentos?: HistoricoOrcamentoUncheckedUpdateManyWithoutOrcamentoNestedInput
  }

  export type OrcamentoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoriaId?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatorioUpdateWithoutUsuarioInput = {
    tipo?: EnumTipoRelatorioEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    relatorio?: StringFieldUpdateOperationsInput | string
    formato?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatorioUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoRelatorioEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    relatorio?: StringFieldUpdateOperationsInput | string
    formato?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatorioUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoRelatorioEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    relatorio?: StringFieldUpdateOperationsInput | string
    formato?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatorioJsonUpdateWithoutUsuarioInput = {
    tipo?: EnumTipoRelatorioJsonEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    dados?: JsonNullValueInput | InputJsonValue
  }

  export type RelatorioJsonUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoRelatorioJsonEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    dados?: JsonNullValueInput | InputJsonValue
  }

  export type RelatorioJsonUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoRelatorioJsonEnumFieldUpdateOperationsInput | $Enums.TipoRelatorioJsonEnum
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    dados?: JsonNullValueInput | InputJsonValue
  }

  export type SubcategoriaCreateManyCategoriaInput = {
    id?: number
    nome: string
  }

  export type OrcamentoCreateManyCategoriaInput = {
    id?: number
    usuarioId: number
    valor: number
    dataInicio: Date | string
    dataFim: Date | string
  }

  export type SubcategoriaUpdateWithoutCategoriaInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type SubcategoriaUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type SubcategoriaUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type OrcamentoUpdateWithoutCategoriaInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutOrcamentosNestedInput
    historicoOrcamentos?: HistoricoOrcamentoUpdateManyWithoutOrcamentoNestedInput
  }

  export type OrcamentoUncheckedUpdateWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
    historicoOrcamentos?: HistoricoOrcamentoUncheckedUpdateManyWithoutOrcamentoNestedInput
  }

  export type OrcamentoUncheckedUpdateManyWithoutCategoriaInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioId?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    dataInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    dataFim?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoricoOrcamentoCreateManyOrcamentoInput = {
    id?: number
    data: Date | string
    valor: number
    status: $Enums.StatusEnum
    tipoAjuste: $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoUpdateWithoutOrcamentoInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFieldUpdateOperationsInput | $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoUncheckedUpdateWithoutOrcamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFieldUpdateOperationsInput | $Enums.TipoAjusteEnum
  }

  export type HistoricoOrcamentoUncheckedUpdateManyWithoutOrcamentoInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusEnumFieldUpdateOperationsInput | $Enums.StatusEnum
    tipoAjuste?: EnumTipoAjusteEnumFieldUpdateOperationsInput | $Enums.TipoAjusteEnum
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaCountOutputTypeDefaultArgs instead
     */
    export type CategoriaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrcamentoCountOutputTypeDefaultArgs instead
     */
    export type OrcamentoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrcamentoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransacaoDefaultArgs instead
     */
    export type TransacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaDefaultArgs instead
     */
    export type CategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubcategoriaDefaultArgs instead
     */
    export type SubcategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubcategoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrcamentoDefaultArgs instead
     */
    export type OrcamentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrcamentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HistoricoOrcamentoDefaultArgs instead
     */
    export type HistoricoOrcamentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HistoricoOrcamentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RelatorioDefaultArgs instead
     */
    export type RelatorioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RelatorioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RelatorioJsonDefaultArgs instead
     */
    export type RelatorioJsonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RelatorioJsonDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}