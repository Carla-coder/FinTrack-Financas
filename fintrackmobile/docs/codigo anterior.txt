import React from 'react';
import { View, Text, ScrollView, StyleSheet, Button, Modal, TextInput, TouchableOpacity, Alert } from 'react-native';
import { ProgressBar, Colors } from 'react-native-paper';
import { PieChart } from 'react-native-chart-kit';

export default function BudgetsScreen() {
  const [modalVisible, setModalVisible] = React.useState(false);
  const [category, setCategory] = React.useState('');
  const [amount, setAmount] = React.useState('');
  const [budgets, setBudgets] = React.useState({
    'Alimentação': { budget: 1000, spent: 700 },
    'Transporte': { budget: 500, spent: 425 },
    'Entretenimento': { budget: 300, spent: 330 },
    'Utilidades': { budget: 500, spent: 250 },
  });

  // const handleAddBudget = () => {
  //   if (category && !isNaN(amount)) {
  //     const updatedBudgets = { ...budgets };
  //     updatedBudgets[category].spent += parseFloat(amount);
  //     setBudgets(updatedBudgets);
  //     setModalVisible(false);
  //   } else {
  //     Alert.alert('Erro', 'Por favor, preencha todos os campos corretamente.');
  //   }
  // };

  if (category && !isNaN(amount)) {
    const updatedBudgets = { ...budgets };
    if (!updatedBudgets[category]) {
      updatedBudgets[category] = { budget: 0, spent: 0 };
    }
    updatedBudgets[category].spent += parseFloat(amount);
    setBudgets(updatedBudgets);
    setModalVisible(false);
  }
  

  const chartData = Object.keys(budgets).map(key => ({
    name: key,
    amount: budgets[key].budget,
    color: key === 'Alimentação' ? Colors.green700 :
           key === 'Transporte' ? Colors.yellow700 :
           key === 'Entretenimento' ? Colors.red700 :
           Colors.blue700,
    legendFontColor: '#7F7F7F',
    legendFontSize: 15,
  }));

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Orçamentos</Text>

      {Object.keys(budgets).map(key => (
        <View key={key} style={styles.card}>
          <Text style={styles.cardTitle}>{key}</Text>
          <ProgressBar progress={budgets[key].spent / budgets[key].budget} color={chartData.find(data => data.name === key).color} />
          <Text>{`R$ ${budgets[key].spent.toFixed(2)} / R$ ${budgets[key].budget.toFixed(2)}`}</Text>
        </View>
      ))}

      <View style={styles.card}>
        <Text style={styles.cardTitle}>Visão Geral</Text>
        <PieChart
          data={chartData}
          width={300}
          height={220}
          chartConfig={{
            backgroundColor: '#f4f4f4',
            backgroundGradientFrom: '#f4f4f4',
            backgroundGradientTo: '#f4f4f4',
            decimalPlaces: 2,
            color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
            style: {
              borderRadius: 16,
            },
          }}
          accessor={'amount'}
          backgroundColor={'transparent'}
          paddingLeft={'15'}
        />
      </View>

      <TouchableOpacity style={styles.addButton} onPress={() => setModalVisible(true)}>
        <Text style={styles.addButtonText}>+</Text>
      </TouchableOpacity>

      <Modal
        visible={modalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalView}>
          <Text style={styles.modalTitle}>Adicionar Orçamento</Text>
          <TextInput
            placeholder="Categoria"
            value={category}
            onChangeText={setCategory}
            style={styles.input}
          />
          <TextInput
            placeholder="Valor Orçado"
            value={amount}
            onChangeText={setAmount}
            keyboardType="numeric"
            style={styles.input}
          />
          <Button title="Adicionar" onPress={handleAddBudget} />
          <Button title="Fechar" onPress={() => setModalVisible(false)} />
        </View>
      </Modal>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f4f4f4',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  card: {
    padding: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  addButton: {
    backgroundColor: '#007bff',
    borderRadius: 30,
    padding: 15,
    position: 'absolute',
    right: 20,
    bottom: 20,
  },
  addButtonText: {
    color: '#fff',
    fontSize: 24,
    textAlign: 'center',
  },
  modalView: {
    marginTop: 100,
    padding: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  input: {
    marginBottom: 15,
    padding: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
  },
});

// import React, { useState } from "react";
// import {
//   View,
//   Text,
//   StyleSheet,
//   Modal,
//   TouchableOpacity,
//   TextInput,
//   FlatList,
//   Picker,
// } from "react-native";
// import { LineChart } from "react-native-chart-kit";

// export default function DashboardScreen() {
//   const [modalVisible, setModalVisible] = useState(false);
//   const [description, setDescription] = useState("");
//   const [amount, setAmount] = useState("");
//   const [date, setDate] = useState("");
//   const [category, setCategory] = useState("");
//   const [transactions, setTransactions] = useState([]);

//   const handleAddTransaction = () => {
//     if (description && amount && date && category) {
//       const newTransaction = {
//         id: transactions.length + 1,
//         description,
//         amount: parseFloat(amount),
//         date,
//         category,
//       };

//       setTransactions([...transactions, newTransaction]);
//       setDescription("");
//       setAmount("");
//       setDate("");
//       setCategory("");
//       setModalVisible(false);
//     } else {
//       alert("Por favor, preencha todos os campos.");
//     }
//   };

//   const formatDate = (text) => {
//     const numbers = text.replace(/\D/g, "");
//     let formattedDate = "";

//     if (numbers.length > 0) {
//       formattedDate += numbers.slice(0, 2); // Dia
//     }
//     if (numbers.length >= 3) {
//       formattedDate += "/" + numbers.slice(2, 4); // Mês
//     }
//     if (numbers.length >= 5) {
//       formattedDate += "/" + numbers.slice(4, 8); // Ano
//     }

//     setDate(formattedDate);
//   };

//   return (
//     <View style={styles.container}>
//       <View style={styles.card}>
//         <Text style={styles.title}>Saldo Atual</Text>
//         <Text style={[styles.balance, { color: "green" }]}>R$ 5.234,56</Text>
//       </View>
//       <View style={styles.card}>
//         <Text style={styles.title}>Gastos do Mês</Text>
//         <Text style={[styles.balance, { color: "red" }]}>R$ 2.145,30</Text>
//       </View>

//       <LineChart
//         data={{
//           labels: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"],
//           datasets: [
//             {
//               data: [3000, 3200, 3100, 3500, 3300, 3700],
//               color: () => `rgba(75, 192, 192, 1)`,
//             },
//             {
//               data: [2500, 2700, 2600, 2800, 2900, 3000],
//               color: () => `rgba(255, 99, 132, 1)`,
//             },
//           ],
//         }}
//         width={400}
//         height={220}
//         chartConfig={{
//           backgroundColor: "#fff",
//           backgroundGradientFrom: "#f4f4f4",
//           backgroundGradientTo: "#f4f4f4",
//           decimalPlaces: 2,
//           color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
//         }}
//         style={styles.chart}
//       />

//       {/* Listar Transações */}
//       <FlatList
//         data={transactions}
//         keyExtractor={(item) => item.id.toString()}
//         renderItem={({ item }) => (
//           <View style={styles.transactionItem}>
//             <Text>{item.date}</Text>
//             <Text>{item.description}</Text>
//             <Text>{item.category}</Text>
//             <Text>{item.amount.toFixed(2)}</Text>
//           </View>
//         )}
//         contentContainerStyle={{ paddingBottom: 280 }}
//       />

//       {/* Modal para adicionar transação */}
//       <Modal
//         animationType="slide"
//         transparent={true}
//         visible={modalVisible}
//         onRequestClose={() => setModalVisible(false)}
//       >
//         <View style={styles.modalContainer}>
//           <View style={styles.modalContent}>

         
//             {/* Container para título e botão de fechar */}
//             <View style={styles.modalHeader}>
//               <Text style={styles.modalTitle}>Adicionar Nova Transação</Text>
//               <TouchableOpacity
//                 style={styles.closeButton}
//                 onPress={() => setModalVisible(false)}
//               >
//                 <Text style={styles.closeButtonText}>X</Text>
//               </TouchableOpacity>
//             </View>

//             <TextInput
//               style={styles.input}
//               placeholder="Data (DD/MM/AAAA)"
//               value={date}
//               onChangeText={formatDate}
//             />

//             <TextInput
//               style={styles.input}
//               placeholder="Descrição"
//               value={description}
//               onChangeText={setDescription}
//             />

//             <Picker
//               selectedValue={category}
//               style={styles.picker}
//               onValueChange={(itemValue) => setCategory(itemValue)}
//             >
//               <Picker.Item label="Selecione uma categoria" value="" />
//               <Picker.Item label="Renda" value="renda" />
//               <Picker.Item label="Alimentação" value="alimentacao" />
//               <Picker.Item label="Transporte" value="transporte" />
//               <Picker.Item label="Utilidades" value="utilidades" />
//               <Picker.Item label="Entretenimento" value="entretenimento" />
//             </Picker>

//             {/* Input para valor */}
//             <TextInput
//               style={styles.input}
//               placeholder="Valor"
//               value={amount}
//               onChangeText={setAmount}
//               keyboardType="numeric"
//             />

//             <View style={styles.modalButtons}>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={handleAddTransaction}
//               >
//                 <Text style={styles.modalButtonText}>Salvar</Text>
//               </TouchableOpacity>
//               <TouchableOpacity
//                 style={styles.modalButton}
//                 onPress={() => setModalVisible(false)}
//               >
//                 <Text style={styles.modalButtonText}>Cancelar</Text>
//               </TouchableOpacity>
//             </View>
//           </View>
//         </View>
//       </Modal>

//       {/* Botão redondo para abrir o modal */}
//       <TouchableOpacity
//         style={styles.roundButton}
//         onPress={() => setModalVisible(true)}
//       >
//         <Text style={styles.roundButtonText}>+</Text>
//       </TouchableOpacity>
//     </View>
//   );
// }

// const styles = StyleSheet.create({
//   container: {
//     padding: 20,
//   },
//   card: {
//     backgroundColor: "#fff",
//     padding: 15,
//     borderRadius: 10,
//     marginBottom: 20,
//     elevation: 5,
//   },
//   title: {
//     fontSize: 18,
//     fontWeight: "bold",
//   },
//   balance: {
//     fontSize: 24,
//     fontWeight: "bold",
//     marginTop: 10,
//   },
//   chart: {
//     marginVertical: 8,
//     borderRadius: 16,
//   },
//   transactionItem: {
//     backgroundColor: "#f4f4f4",
//     padding: 10,
//     borderRadius: 5,
//     flexDirection: "row",
//     justifyContent: "space-between",
//     marginBottom: 10,
//   },
//   modalContainer: {
//     flex: 1,
//     justifyContent: "center",
//     alignItems: "center",
//     backgroundColor: "rgba(0, 0, 0, 0.5)",
//     padding: 20,
//   },
//   modalContent: {
//     backgroundColor: "#fff",
//     padding: 20,
//     borderRadius: 10,
//     width: "100%",
//     masWidth: 400,
//     alignItems: "center",
//     position: "relative",
//   },
//   modalHeader: {
//     flexDirection: "row",
//     justifyContent: "center",
//     alignItems: "center",
//     width: "100%", 
//     marginBottom: 20,
//   },
//   modalTitle: {
//     fontSize: 20,
//     fontWeight: "bold",
//     marginBottom: 20,
//   },
//   closeButton: {
//     position: "absolute", 
//     right: 0, 
//     top: 0, 
//     padding: 10,
//   },
//   closeButtonText: {
//     fontSize: 18,
//     fontWeight: "bold",
//     color: "#007bff",
//   },
//   input: {
//     width: "90%",
//     padding: 10,
//     borderColor: "#ccc",
//     borderWidth: 1,
//     borderRadius: 5,
//     fontSize: 16, 
//     height: 50, 
//     marginBottom: 20,
//   },
//   picker: {
//     width: "90%",
//     fontSize: 16, 
//     height: 50, 
//     borderColor: "#ccc", 
//     borderWidth: 1, 
//     borderRadius: 5, 
//     justifyContent: "center",
//     marginBottom: 20, 
//   },
//   modalButtons: {
//     flexDirection: "row",
//     justifyContent: "space-between",
//     width: "90%",
//   },
//   modalButton: {
//     flex: 1,
//     padding: 10,
//     borderRadius: 5,
//     alignItems: "center",
//     backgroundColor: "#007bff",
//     marginHorizontal: 5,
//   },
//   modalButtonText: {
//     color: "#fff",
//     fontWeight: "bold",
//   },
//   roundButton: {
//     position: "absolute",
//     bottom: 20,
//     right: 20,
//     width: 60,
//     height: 60,
//     borderRadius: 30,
//     backgroundColor: "#007bff",
//     alignItems: "center",
//     justifyContent: "center",
//     elevation: 5,
//   },
//   roundButtonText: {
//     color: "#fff",
//     fontSize: 24,
//     fontWeight: "bold",
//   },
// });


import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  TextInput,
  FlatList,
  Picker,
  ScrollView,
} from "react-native";
import { LineChart } from "react-native-chart-kit";

export default function DashboardScreen() {
  const [modalVisible, setModalVisible] = useState(false);
  const [description, setDescription] = useState("");
  const [amount, setAmount] = useState("");
  const [date, setDate] = useState("");
  const [category, setCategory] = useState("");
  const [transactions, setTransactions] = useState([]);

  const handleAddTransaction = () => {
    if (description && amount && date && category) {
      const newTransaction = {
        id: transactions.length + 1,
        description,
        amount: parseFloat(amount),
        date,
        category,
      };

      setTransactions([...transactions, newTransaction]);
      setDescription("");
      setAmount("");
      setDate("");
      setCategory("");
      setModalVisible(false);
    } else {
      alert("Por favor, preencha todos os campos.");
    }
  };

  const formatDate = (text) => {
    const numbers = text.replace(/\D/g, "");
    let formattedDate = "";

    if (numbers.length > 0) {
      formattedDate += numbers.slice(0, 2); // Dia
    }
    if (numbers.length >= 3) {
      formattedDate += "/" + numbers.slice(2, 4); // Mês
    }
    if (numbers.length >= 5) {
      formattedDate += "/" + numbers.slice(4, 8); // Ano
    }

    setDate(formattedDate);
  };

  return (
    <View style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollView}>
        <View style={styles.card}>
          <Text style={styles.title}>Saldo Atual</Text>
          <Text style={[styles.balance, { color: "green" }]}>R$ 5.234,56</Text>
        </View>
        <View style={styles.card}>
          <Text style={styles.title}>Gastos do Mês</Text>
          <Text style={[styles.balance, { color: "red" }]}>R$ 2.145,30</Text>
        </View>

        <LineChart
          data={{
            labels: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun"],
            datasets: [
              {
                data: [3000, 3200, 3100, 3500, 3300, 3700],
                color: () => `rgba(75, 192, 192, 1)`,
              },
              {
                data: [2500, 2700, 2600, 2800, 2900, 3000],
                color: () => `rgba(255, 99, 132, 1)`,
              },
            ],
          }}
          width={400}
          height={220}
          chartConfig={{
            backgroundColor: "#fff",
            backgroundGradientFrom: "#f4f4f4",
            backgroundGradientTo: "#f4f4f4",
            decimalPlaces: 2,
            color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
          }}
          style={styles.chart}
        />

        {/* Listar Transações */}
        <FlatList
          data={transactions}
          keyExtractor={(item) => item.id.toString()}
          renderItem={({ item }) => (
            <View style={styles.transactionItem}>
              <Text>{item.date}</Text>
              <Text>{item.description}</Text>
              <Text>{item.category}</Text>
              <Text>{item.amount.toFixed(2)}</Text>
            </View>
          )}
          contentContainerStyle={{ paddingBottom: 80 }} // Aumentar paddingBottom para evitar sobreposição
        />
      </ScrollView>

      {/* Modal para adicionar transação */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Adicionar Nova Transação</Text>
              <TouchableOpacity
                style={styles.closeButton}
                onPress={() => setModalVisible(false)}
              >
                <Text style={styles.closeButtonText}>X</Text>
              </TouchableOpacity>
            </View>

            <TextInput
              style={styles.input}
              placeholder="Data (DD/MM/AAAA)"
              value={date}
              onChangeText={formatDate}
            />

            <TextInput
              style={styles.input}
              placeholder="Descrição"
              value={description}
              onChangeText={setDescription}
            />

            <Picker
              selectedValue={category}
              style={styles.picker}
              onValueChange={(itemValue) => setCategory(itemValue)}
            >
              <Picker.Item label="Selecione uma categoria" value="" />
              <Picker.Item label="Renda" value="renda" />
              <Picker.Item label="Alimentação" value="alimentacao" />
              <Picker.Item label="Transporte" value="transporte" />
              <Picker.Item label="Utilidades" value="utilidades" />
              <Picker.Item label="Entretenimento" value="entretenimento" />
            </Picker>

            {/* Input para valor */}
            <TextInput
              style={styles.input}
              placeholder="Valor"
              value={amount}
              onChangeText={setAmount}
              keyboardType="numeric"
            />

            <View style={styles.modalButtons}>
              <TouchableOpacity
                style={styles.modalButton}
                onPress={handleAddTransaction}
              >
                <Text style={styles.modalButtonText}>Salvar</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={styles.modalButton}
                onPress={() => setModalVisible(false)}
              >
                <Text style={styles.modalButtonText}>Cancelar</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* Botão redondo para abrir o modal */}
      <TouchableOpacity
        style={styles.roundButton}
        onPress={() => setModalVisible(true)}
      >
        <Text style={styles.roundButtonText}>+</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
    flex: 1,
  },
  scrollView: {
    flexGrow: 1,
    paddingBottom: 80, // Aumentar o paddingBottom para evitar sobreposição
  },
  card: {
    backgroundColor: "#fff",
    padding: 15,
    borderRadius: 10,
    marginBottom: 20,
    elevation: 5,
  },
  title: {
    fontSize: 18,
    fontWeight: "bold",
  },
  balance: {
    fontSize: 24,
    fontWeight: "bold",
    marginTop: 10,
  },
  chart: {
    marginVertical: 8,
    borderRadius: 16,
  },
  transactionItem: {
    backgroundColor: "#f4f4f4",
    padding: 10,
    borderRadius: 5,
    flexDirection: "row",
    justifyContent: "space-between",
    marginBottom: 10,
  },
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    padding: 20,
  },
  modalContent: {
    backgroundColor: "#fff",
    padding: 30,
    borderRadius: 10,
    marginBottom: 80,
    width: "100%",
    maxWidth: 400,
    alignItems: "center",
    position: "relative",
  },
  modalHeader: {
    flexDirection: "row",
    justifyContent: "center",
    alignItems: "center",
    width: "100%",
    marginBottom: 20,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
  },
  closeButton: {
    position: "absolute",
    right: 0,
    top: 0,
    padding: 10,
  },
  closeButtonText: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#007bff",
  },
  input: {
    width: "90%",
    padding: 10,
    borderColor: "#ccc",
    borderWidth: 1,
    borderRadius: 5,
    fontSize: 16,
    height: 50,
    marginBottom: 20,
  },
  picker: {
    width: "90%",
    fontSize: 16,
    height: 50,
    borderColor: "#ccc",
    borderWidth: 1,
    borderRadius: 5,
    justifyContent: "center",
    marginBottom: 20,
  },
  modalButtons: {
    flexDirection: "row",
    justifyContent: "space-between",
    width: "90%",
  },
  modalButton: {
    flex: 1,
    padding: 10,
    borderRadius: 5,
    alignItems: "center",
    backgroundColor: "#007bff",
    marginHorizontal: 5,
  },
  modalButtonText: {
    color: "#fff",
    fontWeight: "bold",
  },
  roundButton: {
    position: "absolute",
    bottom: 80,
    right: 40, 
    width: 60,
    height: 60,
    borderRadius: 30,
    backgroundColor: "#007bff",
    alignItems: "center",
    justifyContent: "center",
    elevation: 5,
  },
  roundButtonText: {
    color: "#fff",
    fontSize: 24,
    fontWeight: "bold",
  },
});

------------------------------------------------------------------------------------
// login

import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  StyleSheet,
} from "react-native";
import AsyncStorage from '@react-native-async-storage/async-storage';

const LoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const handleLogin = async () => {
    try {
      const storedEmail = await AsyncStorage.getItem("userEmail");
      const storedPassword = await AsyncStorage.getItem("userPassword");

      if (!storedEmail || !storedPassword) {
        Alert.alert("Erro", "Você precisa se cadastrar primeiro!");
        return;
      }

      if (email === storedEmail && password === storedPassword) {
        Alert.alert("Sucesso", "Login realizado com sucesso!");
        navigation.navigate("AppTabs"); // Navega para AppTabs após o login bem-sucedido
      } else {
        Alert.alert("Erro", "Email ou senha incorretos!");
      }
    } catch (error) {
      console.error(error);
      Alert.alert("Erro", "Ocorreu um erro ao fazer login.");
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.loginContainer}>
        <Text style={styles.title}>Login</Text>
        <View style={styles.formGroup}>
          <Text>Email</Text>
          <TextInput
            style={styles.input}
            placeholder="Digite seu email"
            value={email}
            onChangeText={(text) => setEmail(text)}
            keyboardType="email-address"
            autoCapitalize="none"
          />
        </View>
        <View style={styles.formGroup}>
          <Text>Senha</Text>
          <TextInput
            style={styles.input}
            placeholder="Digite sua senha"
            value={password}
            onChangeText={(text) => setPassword(text)}
            secureTextEntry
          />
        </View>
        <TouchableOpacity style={styles.button} onPress={handleLogin}>
          <Text style={styles.buttonText}>Entrar</Text>
        </TouchableOpacity>

        {/* Botão para navegar para a tela de cadastro */}
        <TouchableOpacity 
          style={styles.registerButton} 
          onPress={() => navigation.navigate('Register')}
        >
          <Text style={styles.registerButtonText}>Não tem uma conta? Cadastre-se</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#f4f4f4",
  },
  loginContainer: {
    width: "90%",
    maxWidth: 400,
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 10,
    elevation: 5,
  },
  title: {
    marginBottom: 20,
    fontSize: 24,
    fontWeight: "bold",
    textAlign: "center",
  },
  formGroup: {
    marginBottom: 15,
  },
  input: {
    borderWidth: 1,
    borderColor: "#ccc",
    borderRadius: 5,
    padding: 10,
    marginTop: 5,
  },
  button: {
    backgroundColor: "#007bff",
    padding: 15,
    borderRadius: 5,
    alignItems: "center",
  },
  buttonText: {
    color: "#fff",
    fontWeight: "bold",
  },
  registerButton: {
    marginTop: 20,
    alignItems: "center",
  },
  registerButtonText: {
    color: "#007bff",
    textDecorationLine: "underline",
  },
});

export default LoginScreen;
-------------------------------------------------------------------------
// registro

import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, Button, StyleSheet, Alert } from 'react-native';
import Icon from 'react-native-vector-icons/FontAwesome';
import AsyncStorage from '@react-native-async-storage/async-storage'; 

export default function RegisterScreen({ navigation }) {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);

    const handleRegister = async () => {
        if (password !== confirmPassword) {
            Alert.alert('Erro', 'As senhas não correspondem!');
            return;
        }

        try {
            // Salvar o usuário no AsyncStorage
            await AsyncStorage.setItem('userEmail', email);
            await AsyncStorage.setItem('userPassword', password);
            Alert.alert('Sucesso', 'Cadastro realizado com sucesso!');
            navigation.navigate('Login'); // Redireciona para a página de login após o cadastro
        } catch (error) {
            console.error(error);
            Alert.alert('Erro', 'Ocorreu um erro ao cadastrar. Tente novamente.');
        }
    };

    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const toggleConfirmPasswordVisibility = () => {
        setShowConfirmPassword(!showConfirmPassword);
    };

    return (
        <View style={styles.container}>
            <Text style={styles.title}>Bem-vindo à Finance Manager</Text>
            <Text style={styles.welcomeMessage}>Crie sua conta para gerenciar suas finanças de forma fácil e eficiente!</Text>
            <View style={styles.formGroup}>
                <Text>Email</Text>
                <TextInput
                    style={styles.input}
                    value={email}
                    onChangeText={setEmail}
                    keyboardType="email-address"
                    autoCapitalize="none"
                    required
                />
            </View>
            <View style={styles.formGroup}>
                <Text>Senha</Text>
                <View style={styles.inputGroup}>
                    <TextInput
                        style={styles.input}
                        value={password}
                        onChangeText={setPassword}
                        secureTextEntry={!showPassword}
                        required
                    />
                    <TouchableOpacity onPress={togglePasswordVisibility} style={styles.inputGroupText}>
                        <Icon name={showPassword ? "eye" : "eye-slash"} size={20} color="#333" />
                    </TouchableOpacity>
                </View>
            </View>
            <View style={styles.formGroup}>
                <Text>Confirme a Senha</Text>
                <View style={styles.inputGroup}>
                    <TextInput
                        style={styles.input}
                        value={confirmPassword}
                        onChangeText={setConfirmPassword}
                        secureTextEntry={!showConfirmPassword}
                        required
                    />
                    <TouchableOpacity onPress={toggleConfirmPasswordVisibility} style={styles.inputGroupText}>
                        <Icon name={showConfirmPassword ? "eye" : "eye-slash"} size={20} color="#333" />
                    </TouchableOpacity>
                </View>
            </View>
            <Button title="Cadastrar" onPress={handleRegister} color="#007bff" />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#f4f4f4',
        padding: 20,
    },
    title: {
        fontSize: 24,
        marginBottom: 20,
        textAlign: 'center',
    },
    welcomeMessage: {
        fontSize: 16,
        textAlign: 'center',
        marginBottom: 20,
        color: '#333',
    },
    formGroup: {
        width: '100%',
        marginBottom: 15,
    },
    input: {
        width: '100%',
        height: 40,
        borderColor: '#ccc',
        borderWidth: 1,
        borderRadius: 5,
        paddingHorizontal: 10,
        backgroundColor: '#fff',
    },
    inputGroup: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    inputGroupText: {
        marginLeft: 10,
    },
});

-------------------------------------------------------------------
// relatorios

import React from 'react';
import { View, Text, ScrollView, StyleSheet } from 'react-native';
import { BarChart } from 'react-native-chart-kit';

export default function ReportsScreen() {
  const data = {
    labels: ['Alimentação', 'Transporte', 'Entretenimento', 'Utilidades'],
    datasets: [
      {
        data: [1000, 500, 300, 500],
      },
    ],
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.title}>Relatórios</Text>

      <View style={styles.card}>
        <Text style={styles.cardTitle}>Gastos por Categoria</Text>
        <BarChart
          data={data}
          width={300}
          height={220}
          yAxisLabel={'R$'}
          chartConfig={{
            backgroundColor: '#f4f4f4',
            backgroundGradientFrom: '#f4f4f4',
            backgroundGradientTo: '#f4f4f4',
            decimalPlaces: 2,
            color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
            style: {
              borderRadius: 16,
            },
          }}
        />
      </View>

      <View style={styles.card}>
        <Text style={styles.cardTitle}>Visão Geral de Despesas</Text>
        <Text>Alimentação: R$ 1.000,00</Text>
        <Text>Transporte: R$ 500,00</Text>
        <Text>Entretenimento: R$ 300,00</Text>
        <Text>Utilidades: R$ 500,00</Text>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f4f4f4',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  card: {
    padding: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
});
-------------------------------------------------------------------------

// transações

import React from 'react';
import { View, Text, FlatList, StyleSheet } from 'react-native';

const transactions = [
  { date: '10/06/2023', description: 'Supermercado', category: 'Alimentação', amount: '-R$ 250,00' },
  { date: '08/06/2023', description: 'Salário', category: 'Renda', amount: '+R$ 3.500,00' },
  { date: '05/06/2023', description: 'Conta de Luz', category: 'Utilidades', amount: '-R$ 120,00' },
];

export default function TransactionsScreen() {
  return (
    <View style={styles.container}>
      <FlatList
        data={transactions}
        keyExtractor={(item, index) => index.toString()}
        renderItem={({ item }) => (
          <View style={styles.transaction}>
            <Text>{item.date}</Text>
            <Text>{item.description}</Text>
            <Text>{item.category}</Text>
            <Text style={[styles.amount, item.amount.startsWith('+') ? styles.income : styles.expense]}>
              {item.amount}
            </Text>
          </View>
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
  },
  transaction: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 15,
    borderRadius: 10,
    backgroundColor: '#fff',
    marginBottom: 10,
    elevation: 2,
  },
  amount: {
    fontSize: 16,
  },
  income: {
    color: 'green',
  },
  expense: {
    color: 'red',
  },
});

----------------------------------------------------------------
// app

import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import DashboardScreen from './screens/DashboardScreen';
import TransactionsScreen from './screens/TransactionsScreen';
import BudgetsScreen from './screens/BudgetsScreen';
import ReportsScreen from './screens/ReportsScreen';
import LoginScreen from './screens/LoginScreen';
import RegisterScreen from './screens/RegisterScreen';

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

function AppTabs() {
  return (
    <Tab.Navigator>
      <Tab.Screen name="Dashboard" component={DashboardScreen} />
      <Tab.Screen name="Transactions" component={TransactionsScreen} />
      <Tab.Screen name="Budgets" component={BudgetsScreen} />
      <Tab.Screen name="Reports" component={ReportsScreen} />
    </Tab.Navigator>
  );
}

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Login">
        <Stack.Screen name="Login" component={LoginScreen} />
        <Stack.Screen name="Register" component={RegisterScreen} />
        <Stack.Screen name="AppTabs" component={AppTabs} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}
------------------------------------------------------------

// json - dependencias instaladas

{
  "name": "fintrack",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start --dev-client",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo/metro-runtime": "~3.2.1",
    "@react-native-async-storage/async-storage": "^1.24.0",
    "@react-native-community/masked-view": "^0.1.11",
    "@react-native-picker/picker": "2.7.5",
    "@react-navigation/bottom-tabs": "^6.6.1",
    "@react-navigation/native": "^6.1.18",
    "@react-navigation/stack": "^6.4.1",
    "axios": "^1.7.3",
    "expo": "~51.0.26",
    "expo-status-bar": "~1.12.1",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "0.74.5",
    "react-native-chart-kit": "^6.12.0",
    "react-native-gesture-handler": "~2.16.1",
    "react-native-paper": "^5.12.5",
    "react-native-reanimated": "~3.10.1",
    "react-native-safe-area-context": "4.10.5",
    "react-native-screens": "3.31.1",
    "react-native-svg": "^15.5.0",
    "react-native-vector-icons": "^10.1.0",
    "react-native-web": "~0.19.10"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0"
  },
  "private": true
}
-------------------------------------------------------------
// atualizações do json - 20/08

{
  "name": "fintrack",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "expo start --dev-client",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo/metro-runtime": "~3.2.3",
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-native-community/masked-view": "^0.1.11",
    "@react-native-picker/picker": "2.7.5",
    "@react-navigation/bottom-tabs": "^6.6.1",
    "@react-navigation/drawer": "^6.7.2",
    "@react-navigation/native": "^6.1.18",
    "@react-navigation/stack": "^6.4.1",
    "axios": "^1.7.3",
    "expo": "~51.0.28",
    "expo-status-bar": "~1.12.1",
    "moment": "^2.30.1",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-native": "0.74.5",
    "react-native-chart-kit": "^6.12.0",
    "react-native-gesture-handler": "~2.16.1",
    "react-native-paper": "^5.12.5",
    "react-native-reanimated": "~3.10.1",
    "react-native-safe-area-context": "4.10.5",
    "react-native-screens": "3.31.1",
    "react-native-svg": "15.2.0",
    "react-native-vector-icons": "^10.1.0",
    "react-native-web": "~0.19.10"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0"
  },
  "private": true
}
-------------------------------------------------------------------------------------



